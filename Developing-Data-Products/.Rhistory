subset = Race.Black == 1, na.action = na.omit, data = ckd_data)
other.list = lmList(Log.eGFR ~ Date_From_Stage3_Onset | Patient.Sequence,
subset = Race.Other == 1, na.action = na.omit, data = ckd_data)
white.coef = coef(white.list)
black.coef = coef(black.list)
other.coef = coef(other.list)
boxplot(white.coef[,1], black.coef[,1], other.coef[,1], main = 'Intercepts',
names = c('White', 'Black', 'Other'))
boxplot(white.coef[,2], black.coef[,2], other.coef[,2], main = 'Slopes',
names = c('White', 'Black', 'Other'))
library("nlme")
library("ggplot2")
library("data.table")
library("reshape2")
##########################################################
# Load lme_8 data
##########################################################
## Model data
load(file = "~/Dropbox/CKD/Models/ckd_lme_8c.Rdata")
## eGFR data
load(file = "~/Dropbox/CKD/Data/ckd_data.Rdata")
## Patient database
database <- read.csv("~/Dropbox/CKD/Data/Patient_Database_Scrubbed.csv")
#### Look at coefficients
coefficients <- coef(ckd_lme_8)
library("nlme")
library("ggplot2")
library("data.table")
library("reshape2")
##########################################################
# Load lme_8 data
##########################################################
## Model data
load(file = "~/Dropbox/CKD/Models/ckd_lme_8c.Rdata")
## eGFR data
load(file = "~/Dropbox/CKD/Data/ckd_data.Rdata")
## Patient database
database <- read.csv("~/Dropbox/CKD/Data/Patient_Database_Scrubbed.csv")
#### Look at coefficients
coefficients <- coef(ckd_lme_8c)
coefficients <- coef(ckd_data)
library("nlme")
library("ggplot2")
library("data.table")
library("reshape2")
load(file = "~/Dropbox/CKD/Models/ckd_lme_8c.Rdata")
library("nlme")
library("ggplot2")
library("data.table")
library("reshape2")
##########################################################
# Load lme_8 data
##########################################################
## Model data
load(file = "~/Dropbox/CKD/Models/ckd_lme_8d.Rdata")
load(file = "~/Dropbox/CKD/Models/ckd_lme_8c.Rdata")
## eGFR data
load(file = "~/Dropbox/CKD/Data/ckd_data.Rdata")
## Patient database
database <- read.csv("~/Dropbox/CKD/Data/Patient_Database_Scrubbed.csv")
#### Look at coefficients
coefficients <- coef(ckd_lme_8d)
intervals(ckd_lme_8d)
library("nlme")
library("ggplot2")
library("data.table")
library("reshape2")
##########################################################
# Load lme_8 data
##########################################################
## Model data
load(file = "~/Dropbox/CKD/Models/ckd_lme_8d.Rdata")
library("nlme")
library("ggplot2")
library("data.table")
library("reshape2")
##########################################################
# Load lme_8 data
##########################################################
## Model data
load(file = "~/Dropbox/CKD/Models/ckd_lme_8d.Rdata")
## eGFR data
load(file = "~/Dropbox/CKD/Data/ckd_data.Rdata")
## Patient database
database <- read.csv("~/Dropbox/CKD/Data/Patient_Database_Scrubbed.csv")
#### Look at coefficients
coefficients <- coef(ckd_lme_8d)
#### Look at coefficient intervals
intervals(ckd_lme_8d)
load(file = "~/Dropbox/CKD/Models/ckd_lme_5d.Rdata")
load(file = "~/Dropbox/CKD/Models/ckd_lme_5.Rdata")
intervals(ckd_lme_5)
load(file = "~/Dropbox/CKD/Models/ckd_lme_4.Rdata")
intervals(ckd_lme_4)
x <- intervals(ckd_lme_4)
x
View(coefficients)
View(coefficients)
class(ckd_lme_8d)
ckd_lme_8d_lmlist = lme(CKD_EPI_eGFR ~ time*( male + (Race.Black +Race.Other) + CHF*First.Cardio + MI*First.Cardio + First.Neph + Age.Stage.3.Shifted + kidney.trans), random = ~ time | Patient.Sequence, data = ckd_data, , correlation = corCAR1(form = ~time|Patient.Sequence))
library("nlme")
library("ggplot2")
library("data.table")
library("reshape2")
##########################################################
# Load lme_8 data
##########################################################
## Model data
load(file = "~/Dropbox/CKD/Models/ckd_lme_4.Rdata")
library("nlme")
library("ggplot2")
library("data.table")
library("reshape2")
##########################################################
# Load lme_8 data
##########################################################
## Model data
load(file = "~/Dropbox/CKD/Models/ckd_lme_8d.Rdata")
## eGFR data
load(file = "~/Dropbox/CKD/Data/ckd_data.Rdata")
## Patient database
database <- read.csv("~/Dropbox/CKD/Data/Patient_Database_Scrubbed.csv")
#### Look at coefficients
coefficients <- coef(ckd_lme_8d)
#### Look at coefficient intervals
ckd_lme_8d_lmlist = lme(CKD_EPI_eGFR ~ time*( male + (Race.Black +Race.Other) + CHF*First.Cardio + MI*First.Cardio + First.Neph + Age.Stage.3.Shifted + kidney.trans), random = ~ time | Patient.Sequence, data = ckd_data, correlation = corCAR1(form = ~time|Patient.Sequence))
class(ckd_lme_8d_lmlist)
intervals.lme(ckd_lme_8d)
library("nlme")
x <- intervals.lme(ckd_lme_8d)
x <- intervals(ckd_lme_8d)
x <- intervals(ckd_lme_8d_lmlist)
x <- intervals(ckd_lme_8d_lmlist, which="var-cor")
x <- intervals(ckd_lme_8d_lmlist, which="var-cov")
VarCorr(ckd_lme_8d)
intervals(ckd_lme_8d)
View(coefficients)
##Program: stat03.R
##task: Play around with ckd_lme_8d data
##project: CKD
##Authors: Josh Taylor, Mark Dakkak
##Last Edited: 12/1/14
library("nlme")
library("ggplot2")
library("data.table")
library("reshape2")
##########################################################
# Load lme_8 data
##########################################################
## Model data
load(file = "~/Dropbox/CKD/Models/ckd_lme_8d.Rdata")
## eGFR data
load(file = "~/Dropbox/CKD/Data/ckd_data.Rdata")
## Patient database
database <- read.csv("~/Dropbox/CKD/Data/Patient_Database_Scrubbed.csv")
#### Look at coefficients
coefficients <- coef(ckd_lme_8d)
fastest_decline <- coefficients[order(coefficients$time),]
fastest_decline <- fastest_decline[1:25,]
fastest.25 <- database[database$Patient.Sequence %in% row.names(fastest_decline),]
View(fastest.25)
View(fastest_decline)
## Find individuals who have had transplants
## NOTE: JOSH, THIS WON'T WORK FOR YOU!
library(data.table)
library(stringr)
diagnoses <- fread("/Users/sommpd10/Desktop/DukeMed/Research/Rolling.io/CKD Project/Data/ICD9_patientdiagnoses_11_11_Stage3Subgroup.csv")
setnames(diagnoses, names(diagnoses), gsub(" ", ".", names(diagnoses)))
transplant <- diagnoses[ICD.Diagnosis.Code == "V42.0"]
transplant_pts <- unique(transplant[,Patient.Identifier])
codebook <- fread("/Users/sommpd10/Desktop/DukeMed/Research/Rolling.io/CKD Project/Output/ML Final Project/ML_Final_Project_Codebook.csv")
setnames(codebook, names(codebook), gsub(" ", ".", names(codebook)))
transplant_pts <- codebook[Patient.Identifier %in% transplant_pts, Patient.Sequence]
##
transplant.28 <- database[database$Patient.Sequence %in% transplant_pts,]
View(transplant.28)
transplant.28.events <- melt(transplant.28, id.vars = "Patient.Sequence", measure.vars = c("First.MI.Diagnosis.Date", "First.CHF.Diagnosis.Date", "First.Cards.Visit.Date", "First.Nephrology.Visit.Date", "First.Kidney.Transplant.Date"), value.name = "time", na.rm = TRUE)
transplant.28.events <- transplant.28.events[order(transplant.28$Patient.Sequence),]
transplant.28.events$time = transplant.28.events$time/365
transplant.28.labs <- ckd_data[ckd_data$Patient.Sequence %in% transplant_pts,]
transplant.28.labs$Patient.Sequence <- as.factor(transplant.28.labs$Patient.Sequence)
View(transplant.28.events)
View(transplant.28)
View(transplant.28.events)
transplant.28.events <- melt(transplant.28, id.vars = "Patient.Sequence", measure.vars = c("First.MI.Diagnosis.Date", "First.CHF.Diagnosis.Date", "First.Cards.Visit.Date", "First.Nephrology.Visit.Date", "First.Kidney.Transplant.Date"), value.name = "time", na.rm = TRUE)
View(transplant.28.events)
transplant.28.events <- transplant.28.events[order(transplant.28$Patient.Sequence),]
transplant.28.events$time = transplant.28.events$time/365
transplant.28.labs <- ckd_data[ckd_data$Patient.Sequence %in% transplant_pts,]
transplant.28.labs$Patient.Sequence <- as.factor(transplant.28.labs$Patient.Sequence)
## Image for transplant patients
quartz()
sp <- ggplot(data = transplant.28.labs, aes(x = time, y = CKD_EPI_eGFR, group = Patient.Sequence)) + geom_line() + geom_point(size = 1) + facet_wrap( ~ Patient.Sequence, ncol=4) + theme_bw() + labs(title = "Glomerular Filtration Rate Over Time for 28 Patients \n with ICD9 Code V42.0", x = "Years Before/After Stage 3", y = "Estimated Glomerular Filtration Rate (eGFR)")
sp + geom_vline(width = 0.2, aes(xintercept=time, color = variable), data = transplant.28.events) + scale_colour_manual(values = c("red", "blue", "green", "orange", "gray"))
View(transplant.28.events)
dev.off()
transplant.28.events <- melt(transplant.28, id.vars = "Patient.Sequence", measure.vars = c("First.MI.Diagnosis.Date", "First.CHF.Diagnosis.Date", "First.Cards.Visit.Date", "First.Nephrology.Visit.Date", "First.Kidney.Transplant.Date"), value.name = "time", na.rm = TRUE)
transplant.28.events <- transplant.28.events[order(transplant.28$Patient.Sequence),]
transplant.28.events <- melt(transplant.28, id.vars = "Patient.Sequence", measure.vars = c("First.MI.Diagnosis.Date", "First.CHF.Diagnosis.Date", "First.Cards.Visit.Date", "First.Nephrology.Visit.Date", "First.Kidney.Transplant.Date"), value.name = "time", na.rm = TRUE)
View(transplant.28.events)
transplant.28.events[order(transplant.28$Patient.Sequence),]
transplant.28.events[order(transplant.28$Patient.Sequence)]
order(transplant.28$Patient.Sequence)
transplant.28.events[order(transplant.28.events$Patient.Sequence),]
transplant.28.events <- transplant.28.events[order(transplant.28.events$Patient.Sequence),]
transplant.28.events$time = transplant.28.events$time/365
transplant.28.labs <- ckd_data[ckd_data$Patient.Sequence %in% transplant_pts,]
transplant.28.labs$Patient.Sequence <- as.factor(transplant.28.labs$Patient.Sequence)
## Image for transplant patients
quartz()
sp <- ggplot(data = transplant.28.labs, aes(x = time, y = CKD_EPI_eGFR, group = Patient.Sequence)) + geom_line() + geom_point(size = 1) + facet_wrap( ~ Patient.Sequence, ncol=4) + theme_bw() + labs(title = "Glomerular Filtration Rate Over Time for 28 Patients \n with ICD9 Code V42.0", x = "Years Before/After Stage 3", y = "Estimated Glomerular Filtration Rate (eGFR)")
sp + geom_vline(width = 0.2, aes(xintercept=time, color = variable), data = transplant.28.events) + scale_colour_manual(values = c("red", "blue", "green", "orange", "gray"))
dev.copy(png, filename = "~/Dropbox/CKD/Graphs, Charts, Tables/transplant.28.lattice.png", width = 8, height = 8, units = "in", res = 600,bg = "white")
dev.off()
dev.off()
dev.off()
View(coefficients)
intercept <- coefficients[,"(Intercept)"]
intercept
time <- coefficients[, "time"]
quartz()
ggplot(time, aes(x=time)) + geom_density
quartz()
ggplot(coefficients, aes(x=intercept)) + geom_density
ggplot(coefficients, aes(x=intercept)) + geom_density()
dev_off()
dev.off()
quartz()
ggplot(coefficients, aes(x=intercept)) + geom_density() + theme_bw()
dev.off()
quartz()
ggplot(coefficients, aes(x=intercept)) + geom_histogram(binwidth=10) + theme_bw()
dev.off()
quartz()
ggplot(coefficients, aes(x=intercept)) + geom_histogram(binwidth=10) + theme_bw() + labs(x = "First eGFR Lab", y = "Number of Patients", title = "Distribution of Initial eGFR Values")
dev.off()
quartz()
ggplot(coefficients, aes(x=intercept)) + geom_histogram(binwidth=10) + theme_bw() + labs(x = "First eGFR Lab", y = "Number of Patients", title = "Distribution of Initial eGFR Values") + geom_vline(aes(xintercept=mean(intercept, na.rm=T)), color="red", linetype="dashed", size=1)
dev.off()
quartz()
ggplot(coefficients, aes(x=intercept)) + geom_histogram(binwidth=5) + theme_bw() + labs(x = "First eGFR Lab", y = "Number of Patients", title = "Distribution of Initial eGFR Values") + geom_vline(aes(xintercept=mean(intercept, na.rm=T)), color="red", linetype="dashed", size=1)
rm(intercept)
rm(time)
dev.copy(png, filename = "~/Dropbox/CKD/Graphs, Charts, Tables/InterceptHistogram.png", width = 8, height = 8, units = "in", res = 600,bg = "white")
dev.off()
dev.off()
quartz()
ggplot(coefficients, aes(x=time)) + geom_histogram(binwidth=5) + theme_bw() + labs(x = "First eGFR Lab", y = "Number of Patients", title = "Distribution of Time Coefficient") + geom_vline(aes(xintercept=mean(intercept, na.rm=T)), color="red", linetype="dashed", size=1)
ggplot(coefficients, aes(x=time)) + geom_histogram(binwidth=5) + theme_bw() + labs(x = "First eGFR Lab", y = "Number of Patients", title = "Distribution of Time Coefficient") + geom_vline(aes(xintercept=mean(time, na.rm=T)), color="red", linetype="dashed", size=1)
dev.off()
quartz()
ggplot(coefficients, aes(x=time)) + geom_histogram(binwidth=1) + theme_bw() + labs(x = "First eGFR Lab", y = "Number of Patients", title = "Distribution of Time Coefficient") + geom_vline(aes(xintercept=mean(time, na.rm=T)), color="red", linetype="dashed", size=1)
dev.off()
dev.off()
quartz()
ggplot(coefficients, aes(x=time)) + geom_histogram(binwidth=1) + theme_bw() + labs(x = "Time Coefficient (i.e., Rate of eGFR Change per Year)", y = "Number of Patients", title = "Distribution of the Impact of Time on eGFR Function") + geom_vline(aes(xintercept=mean(time, na.rm=T)), color="red", linetype="dashed", size=1)
dev.copy(png, filename = "~/Dropbox/CKD/Graphs, Charts, Tables/TimeCoeffHistogram.png", width = 8, height = 8, units = "in", res = 600,bg = "white")
dev.off()
dev.off()
dev.off()
library(data.table)
data <- fread("/Users/sommpd10/Desktop/encounter.csv")
library(stringr)
?gsub
names(data)
setnames(data, names(data), gsub(" ", ".", names(data)))
names(data)
View(data)
table(data$Clinic.Service.or.Specialty)
names(data)
data[grep("ortho", Clinic.Service.or.Specialty, ignore.case = TRUE)]
test <- data[grep("ortho", Clinic.Service.or.Specialty, ignore.case = TRUE)]
View(test)
names <- table(data$Clinic.Service.or.Specialty)
table(data$Clinic.Service.or.Specialty)
View(test)
?regex
?grep
test <- data[grep("ortho", Clinic.Service.or.Specialty, ignore.case = TRUE)]
table(test$Clinic.Service.or.Specialty)
Ortho <- data[grep("ortho|sport", Clinic.Service.or.Specialty, ignore.case = TRUE)]
rm(test)
table(Ortho$Clinic.Service.or.Specialty)
View(Ortho)
?as.Date
?word
Ortho[, Arrival.Date := as.Date(word(Arrival.Date, 1), format = "%m/%d/%y)")]
View(Ortho)
Ortho <- data[grep("ortho|sport", Clinic.Service.or.Specialty, ignore.case = TRUE)]
View(Ortho)
Ortho[, Arrival.Date := as.Date(word(Arrival.Date, 1), format = "%m/%d/%Y)")]
View(Ortho)
Ortho <- data[grep("ortho|sport", Clinic.Service.or.Specialty, ignore.case = TRUE)]
View(Ortho)
Ortho[, Arrival.Date := as.Date(word(Arrival.Date, 1), format = "%m/%d/%Y)")]
View(Ortho)
Ortho <- data[grep("ortho|sport", Clinic.Service.or.Specialty, ignore.case = TRUE)]
View(Ortho)
Ortho[, Arrival.Date := as.Date(word(Arrival.Date, 1), format = "%m/%d/%Y")]
View(Ortho)
?write.csv
write.csv(Orth, file = "/Users/sommpd10/Desktop/Ortho.csv")
write.csv(Ortho, file = "/Users/sommpd10/Desktop/Ortho.csv")
table(Ortho$Clinic.Service.or.Specialty)
View(Ortho)
Ortho[, Encounter.Identifier := NULL]
View(Ortho)
?seq
unique(Ortho[Patient.Identifier])
patients <- unique(Ortho[Patient.Identifier])
names(Ortho)
class(Ortho)
Ortho[Patient.Identifier]
Ortho[,Patient.Identifier]
unique(Ortho[,Patient.Identifier])
patients <- unique(Ortho[,Patient.Identifier])
?data.frame
seq(1,length(unique(Ortho[,Patient.Identifier])))
x <- data.frame(unique(Ortho[,Patient.Identifier]), seq(1,length(unique(Ortho[,Patient.Identifier]))))
View(x)
x <- data.frame(Patient.Identifier = unique(Ortho[,Patient.Identifier]), Seq = seq(1,length(unique(Ortho[,Patient.Identifier]))))
View(x)
y <- merge(Ortho, x, by = Patient.Identifier)
x <- data.table(Patient.Identifier = unique(Ortho[,Patient.Identifier]), Seq = seq(1,length(unique(Ortho[,Patient.Identifier]))))
View(x)
y <- merge(Ortho, x, by = Patient.Identifier)
y <- merge(Ortho, x, by = "Patient.Identifier")
View(y)
Ortho <- merge(Ortho, x, by = "Patient.Identifier")
rm(y)
View(Ortho)
Ortho[, Patient.Identifier := Seq]
View(Ortho)
Ortho[, Patient.Identifier := Seq][, Seq := NULL]
View(Ortho)
write.csv(Ortho, file = "/Users/sommpd10/Desktop/Ortho.csv")
library(data.table)
library(stringr)
library(plyr)
################## Load data ##################
SE_ICD9 <- fread("/Users/sommpd10/Desktop/DukeMed/Research/DOC/Presentations/3-16-15 -Report Out/Report_SocialDeterminantICD9Codes_Q1FY2015")
SE_ICD9 <- fread("/Users/sommpd10/Desktop/DukeMed/Research/DOC/Presentations/3-16-15 -Report Out/Report_SocialDeterminantICD9Codes_Q1FY2015.csv")
names(SE_ICD9)
View(SE_ICD9)
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){
hist(galton$child, col = "blut", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("HistData")
library(HistData)
myHist <- function(mu){
hist(galton$child, col = "blut", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("UsingR")
library(UsingR)
myHist <- function(mu){
hist(galton$child, col = "blut", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child, col = "blue", breaks = 100)
lines(c(mu, mu), c(0, 150), col = "red", lwd = 5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("rCharts")
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex == 'Male'))
n1$save('fig/n1.html', cdn = TRUE)
n1
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src = "fig/n1.html" width = 100%, height = 600></iframe>')
install.packages("slidify")
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1
hair_eye = as.data.frame(HairEyeColor)
r2 <- rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
r2
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1") # print out the js
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1
require(reshape2)
usepexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2] = c("category", "year")
uspexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2] = c("category", "year")
x1 <- xPlot(value ~ year, group = "category", data = uspexp, type = "line-dotted")
x1
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopul = "<p> Hi. I am a popup <p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup <p>")
map3
usp = reshape2::melt(USPersonalExpenditure)
# get the decades into a date Rickshaw likes
usp$Var2 <- as.numeric(as.POSIXct(paste0(usp$Var2, "-01-01")))
p4 <- Rickshaw$new()
p4$layer(value ~ Var2, group = "Var1", data = usp, type = "area", width = 560)
# add a helpful slider this easily; other features TRUE as a default
p4$set(slider = TRUE)
p4
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line", "bubble", "scatter"), group = "Clap", size = "Age")
h1
install.packages("googleVis")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M
plot(M)
print(M, "chart")
G <- gvisGeoCharts(Exports, locationvar = "Country", colovar = "Profit", options = list(width = 600, height = 400))
G <- gvisGeoChart(Exports, locationvar = "Country", colovar = "Profit", options = list(width = 600, height = 400))
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 600, height = 400))
plot(G)
df <- data.frame(label = c("US", "GB", "BR"), val1 = c(1, 3, 4), val2 = c(23, 12, 32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
plot(Line)
G <- gvisGeoChart(Exports, "Country", "Profit", options = list(width = 200, height = 100))
T1 <- gvisTable(Exports, options = list(width = 200, height = 270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 400, height = 370))
GT <- gvisMerge(G, T1, horizontal = FALSE)
GTM <- gvisMerge(GT, M, horizontal = TRUE, tableOptions = "bgcolor=\#CCCCC\" cellspacing = 10")
GTM <- gvisMerge(GT, M, horizontal = TRUE, tableOptions = "bgcolor=\"#CCCCC\" cellspacing = 10")
GT
plot(GT)
plot(GTM)
print(GT)
library(devtools)
install.packages("Rtools")
install.packages("RTools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mpdakkak', token='D96F83E42183B88F27E1D03C561DB7CD', secret='DuMALGpHZYXoEnyDlla+clpSo0RoxlvWgkUioGku')
install_github("ropensci/plotly")
install.packages("plotly")
library(plotly)
set_credentials_file("mpdakkak", "a4c4tagkcn")
library(ggplot2)
py <- plotly()
load("courseraData.rda")
load("courseraData.rda")
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
g <- qplot(carat, price, data=dsamp, colour=clarity)
g
py <- plotly()
out <- py$ggplotly(g)
out$response$url
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
?manipulate
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
load(airquality)
data(airquality)
airquality
View(airquality)
dTable(airquality, sPaginationType = "full_numbers")
?dTable
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
getwd()
setwd("/Users/sommpd10/datasciencecoursera/Developing-Data-Products")
getwd()
runApp()
files()
list.files()
library(shiny)
runApp()
runApp()
runApp()
runApp()
