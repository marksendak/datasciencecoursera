Visits.by.Month$month.year <- as.Date(Visits.by.Month$month.year, "%m-%Y")
Visits.by.Month$month.year <- Visits.by.Month[['format(Visit_Date, "%m-%Y")']]
Visits.by.Month$month.year <- factor(Visits.by.Month$month.year, ordered = TRUE)
p1 <- ggplot(Visits.by.Month, aes(x = month.year, y=visits, color=patientidentifier))
p1 + geom_line()
p1 <- ggplot(Visits.by.Month, aes(x = month.year, y=visits))
p1 + geom_line()
Visits.by.Month$month.year <- as.POSIXlt(Visits.by.Month$month.year, format = "%m-%Y")
Visits.by.Month$month.year <- Visits.by.Month[['format(Visit_Date, "%m-%Y")']]
library(lubridate)
install.packages("lubridate")
library(lubridate)
Visits.by.Month <- ddply(visit.data, ~ patientidentifier + format(Visit_Date, "%m-%Y"), summarize, visits=sum(ED_0), visit.date=floor_date(Visit_Date, "month")
Visits.by.Month <- ddply(visit.data, ~ patientidentifier + format(Visit_Date, "%m-%Y"), summarize, visits=sum(ED_0), visit.date = floor_date(Visit_Date, "month"))
Visits.by.Month <- ddply(visit.data, ~ patientidentifier + format(Visit_Date, "%m-%Y"), summarize, visits=sum(ED_0), visit.date = floor_date(Visit_Date, "month"))
Visits.by.Month <- ddply(visit.data, ~ patientidentifier + floor_date(Visit_Date, "month"), summarize, visits=sum(ED_0))
Visits.by.Month$month.year <- Visits.by.Month[['floor_date(Visit_Date, "month")']]
p1 <- ggplot(Visits.by.Month, aes(x = month.year, y=visits))
p1 + geom_line()
p1 <- ggplot(Visits.by.Month, aes(x = month.year, y=visits. color=patientidentifier))
p1 + geom_line()
p1 <- ggplot(Visits.by.Month, aes(x = month.year, y=visits, color=patientidentifier))
p1 + geom_line()
Top.5.ED.Visits <- subset(Visits.by.Month, Visits.by.Month$patientidentifier %in% Top.5)
p1 <- ggplot(Top.5.ED.Visits, aes(x = month.year, y=visits, color=patientidentifier))
p1 + geom_line()
p1 + geom_line() + facet_wrap(~ patientidentifier)
p1 + geom_line() + facet_wrap(~ patientidentifier) + geom_point()
library(reshape)
install.packages("reshape2")
View(Top.5.Visits)
visit.data <- read.dta("/Users/sommpd10/Desktop/DukeMed/Research/DOC/Data Analysis/PubPol 590 Analysis/Data")
library(foreign)
library(ggplot2)
library(plyr)
library(lubridate)
library(reshape2)
visit.data <- read.dta("/Users/sommpd10/Desktop/DukeMed/Research/DOC/Data Analysis/PubPol 590 Analysis/Data")
library(foreign)
library(ggplot2)
library(plyr)
library(lubridate)
library(reshape2)
visit.data <- read.dta("/Users/sommpd10/Desktop/DukeMed/Research/DOC/Data Analysis/PubPol 590 Analysis/Data/R_VisitData_Old.dta")
View(ED.bypatient.visits)
View(ED.visits)
View(visit.data)
visit.data$ED_Visit <- as.numeric(ifelse(visit.data$Visit_Type != 2), 0, 1)
visit.data$ED_Visit <- as.numeric(if (visit.data$Visit_Type != 2) 0 else 1)
View(visit.data)
View(visit.data)
visit.data$ED_Visit <- as.numeric(ifelse(visit.data$Visit_Type!=2), 0, 1)
library(foreign)
library(ggplot2)
library(plyr)
library(lubridate)
library(reshape2)
visit.data <- read.dta("/Users/sommpd10/Desktop/DukeMed/Research/DOC/Data Analysis/PubPol 590 Analysis/Data/R_VisitData_Old.dta")
#Assigns data set "visit.data" the stata file "R_VisitData_Old.dta
visit.data$patientidentifier <- factor(visit.data$patientidentifier)
visit.data$Visit_date <- factor(visit.data$Visit_date)
visit.data$Visit_Type <- factor(visit.data$Visit_Type)
View(visit.data)
visit.data$ED_Visit <- as.numeric(ifelse(visit.data$Visit_Type!=2), 0, 1)
visit.data$ED_Visit <- as.numeric(ifelse((visit.data$Visit_Type!=2), 0, 1)
View(visit.data)
visit.data$ED_Visit <- as.numeric(ifelse(visit.data$Visit_Type!=2, 0, 1)
View(visit.data)
visit.data$ED_Visit <- as.numeric(ifelse(Visit_Type!=2, 0, 1)
View(visit.data)
visit.data$ED_Visit <- as.numeric(ifelse(Visit_Type==2,1,1)
View(visit.data)
visit.data$ED_Visit <- as.numeric(ifelse(visit.data$Visit_Type==2,1,0)
View(visit.data)
View(visit.data)
typeof(visit.data$Visit_Type)
visit.data$ED_Visit <- ifelse(visit.data$Visit_Type==2,1,0)
View(visit.data)
cumsum(visit.data$ED_Visit)
View(visit.data)
ED.visits <- ddply(visit.data, ~ patientidentifier, summarize, total.visits=cumsum(ED_Visit), visit.date=Visit_date)
View(ED.visits)
ED.bypatient.visits <- ddply(ED.visits, ~patientidentifier, summarize, max.visits=max(total.visits))
View(ED.bypatient.visits)
ED.ordered <- ED.bypatient.visits[order(ED.bypatient.visits$max.visits, decreasing = TRUE), ]
View(ED.ordered)
Top.5 <- ED.ordered[1:5,1]
View(ED.ordered)
library(foreign)
library(ggplot2)
library(plyr)
library(lubridate)
library(reshape2)
visit.data <- read.dta("/Users/sommpd10/Desktop/DukeMed/Research/DOC/Data Analysis/PubPol 590 Analysis/Data/R_VisitData_Old.dta")
#Assigns data set "visit.data" the stata file "R_VisitData_Old.dta
visit.data$patientidentifier <- factor(visit.data$patientidentifier)
visit.data$Visit_date <- factor(visit.data$Visit_date)
visit.data$Visit_Type <- factor(visit.data$Visit_Type)
visit.data$ED_Visit <- ifelse(visit.data$Visit_Type==2,1,0)
View(visit.data)
View(visit.data)
View(visit.data)
View(visit.data)
range(ED_Visit)
range(visit.data$ED_Visit)
library(foreign)
library(ggplot2)
library(plyr)
library(lubridate)
library(reshape2)
visit.data <- read.dta("/Users/sommpd10/Desktop/DukeMed/Research/DOC/Data Analysis/PubPol 590 Analysis/Data/R_VisitData_Old.dta")
#Assigns data set "visit.data" the stata file "R_VisitData_Old.dta
visit.data$patientidentifier <- factor(visit.data$patientidentifier)
visit.data$Visit_date <- factor(visit.data$Visit_date)
visit.data$Visit_Type <- factor(visit.data$Visit_Type)
typeof(visit.data$Visit_Type)
#returns the variable type: gave "integer"
visit.data$ED_Visit <- ifelse(visit.data$Visit_Type=2,1,0)
range(visit.data$Visit_Type)
range(Visit_Type)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
intrain <- createDataPartition(y = iris$Species, p = 0.7, list = FALSE)
data(iris); library(ggplot2); library(caret)
names(iris)
table(iris$Species)
# Want to predict species from the other variables
### Create training and test sets
intrain <- createDataPartition(y = iris$Species, p = 0.7, list = FALSE)
training <- iris[inTrain,]
inTrain <- createDataPartition(y = iris$Species, p = 0.7, list = FALSE)
rm(intrain)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petel.Width, Sepal.Width, color = Species, data = training)
quartz()
qplot(Petel.Width, Sepal.Width, color = Species, data = training)
qplot(Petal.Width, Sepal.Width, color = Species, data = training)
modFit <- train(Species ~ ., method = "rpart", data = training)
# rpart is an r package for regression and classification trees
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
quartz()
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modeFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
dev.off()
print(modFit$finalModel)
# Gives you all the nodes and how they're split
# Gives probability of being in each class at each split
# All 35 flowers with a Petal.Length < 2.45 are species Serosa
# Plot tree
quartz()
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
dev.off()
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
quartz()
fancyRpartPlot(modFit$finalModel)
dev.off()
predict(modFit, newdata = testing)
clear()
install.packages("ElemStatLearn")
library(ElemStatLearn); data(ozone, package = "ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA, nrow = 10, ncol = 155)
for (i in 1:10){
ss <- sample(1:dim(ozone)[1], replace = T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0, newdata = data.frame(ozone = 1:155))
}
head(ll)
quartz()
plot(ozone$ozone, ozone$temperature, pch = 19, cex = 0.5)
for (i in 1:10){lines(1:155, ll[i,], col = "grey", lwd = 2)}
lines(1:155, apply(ll,2,mean), col = "red", lwd = 2)
dev.off()
library(data.table)
# Need 1.9.5, instructions here: https://github.com/Rdatatable/data.table/wiki/Installation
library(caret)
############################ Load data ############################
## Put data in memory
training <- fread("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
testing <- fread("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
training[, lapply(.SD, function(x) sum(is.na(x) | x == "", na.rm = TRUE))]
missing_training <- t(training[, lapply(.SD, function(x) sum(is.na(x) | x == "", na.rm = TRUE))])
class(missing_training)
missing_training <- as.data.frame(t(training[, lapply(.SD, function(x) sum(is.na(x) | x == "", na.rm = TRUE))]))
View(missing_training)
table(missing_training$V1)
missing_training$V1
missing <- missing_training$V1[missing_training$V1 != 0]
missing
missing <- row.names(missing_training[missing_training$V1 != 0])
View(missing_training)
row.names(missing_training)
missing_training <- missing_training[missing_training$V1 != 0]
?as.data.table
missing_training <- as.data.table(t(training[, lapply(.SD, function(x) sum(is.na(x) | x == "", na.rm = TRUE))]), keep.rownames = TRUE)
View(missing_training)
table(missing_training$V1)
View(missing_training)
missing <- missing_training[V1 != 0 & rn != "V1", V1]
missing
missing <- missing_training[V1 != 0 & rn != "V1", rn]
missing
setdiff(names(training), missing)
missing
View(testing)
View(training)
missing <- missing_training[V1 != 0, rn]
missing
table(missing_training$V1)
View(missing_training)
training <- training[, .(setdiff(names(training), missing))]
View(training)
View(testing)
View(training)
training <- fread("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
test <- training[, list(setdiff(names(training), missing))]
test <- training[, .(setdiff(names(training), missing)), with = FALSE]
test <- training[, setdiff(names(training), missing), with = FALSE]
training <- training[, setdiff(names(training), missing), with = FALSE]
rm(test)
setdiff(names(testing), names(training))
setdiff(names(testing), missing)
testing <- testing[, setdiff(names(testing), missing)]
library(data.table)
# Need 1.9.5, instructions here: https://github.com/Rdatatable/data.table/wiki/Installation
library(caret)
############################ Load data ############################
## Put data in memory
training <- fread("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
testing <- fread("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
############################ Clean data ############################
## Calculate missingness in training data
missing_training <- as.data.table(t(training[, lapply(.SD, function(x) sum(is.na(x) | x == "", na.rm = TRUE))]), keep.rownames = TRUE)
## Confirm that variables are either entirely missing / entirely present
table(missing_training$V1)
## Drop columns that are entirely missing
missing <- missing_training[V1 != 0, rn]
training <- training[, setdiff(names(training), missing), with = FALSE]
## Drop columns from testint set
testing <- testing[, setdiff(names(testing), missing), with = FALSE]
names(training)
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = FALSE)
train <- training[inTrain,]; test <- training[-inTrain,]
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = FALSE)
train <- training[inTrain,]
inTrain
training <- as.data.frame(training)
train <- training[inTrain,]
test <- training[-inTrain,]
dim(train)
dim(test)
View(train)
nsv <- nearZeroVar(train, saveMetrics = TRUE)
nsv
View(nsv)
?nearZeroVar
sum(nsv$zeroVar)
sum(nsv$nzv)
nsv[order(freqRatio)]
nsv[order(nsv$freqRatio)]
nsv[order(nsv$freqRatio),]
nsv[order(-nsv$freqRatio),]
nsv <- nsv[order(-nsv$freqRatio),]
# Reorder data frame by frequency ratio (the ratio of frequencies for the most common value over the second most common value)
head(nsv)
sum(nsv$nzv)
class(train)
xxx <- train[,-new_window]
xxx <- train[,!("new_window")]
names(train) != "new_window"
setdiff(names(train),"new_window")
nsv$nsv[nsv$nsv == "TRUE"]
nsv$nsv == "TRUE"
train <- train[,setdiff(names(train),"new_window")]
test <- test[,setdiff(names(test), "new_window")]
testing <- testing[,setdiff(names(testing), "new_window")]
############################ Load packages ############################
library(data.table)
# Need 1.9.5, instructions here: https://github.com/Rdatatable/data.table/wiki/Installation
library(caret)
############################ Load data ############################
## Put data in memory
training <- fread("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
testing <- fread("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
############################ Clean data ############################
## Calculate missingness in training data
missing_training <- as.data.table(t(training[, lapply(.SD, function(x) sum(is.na(x) | x == "", na.rm = TRUE))]), keep.rownames = TRUE)
## Confirm that variables are either entirely missing / entirely present
table(missing_training$V1)
## Drop columns that are entirely missing
missing <- missing_training[V1 != 0, rn]
training <- training[, setdiff(names(training), missing), with = FALSE]
## Drop columns from testint set
testing <- testing[, setdiff(names(testing), missing), with = FALSE]
############################ Split training data ############################
## Convert data tables to data frames
training <- as.data.frame(training)
testing <- as.data.frame(testing)
## Split training set
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = FALSE)
train <- training[inTrain,]
test <- training[-inTrain,]
## Dimensions of training and testing sets
dim(train)
# 13,737 rows
dim(test)
# 5,885 rows
############################ Identify covariates with zero covariance ############################
nsv <- nearZeroVar(train, saveMetrics = TRUE)
# Identifies the variables that have nearly zero variability
nsv <- nsv[order(-nsv$freqRatio),]
# Reorder data frame by frequency ratio (the ratio of frequencies for the most common value over the second most common value)
head(nsv)
# Returns a data frame
## Show the number of variables with 0 variance or near-zero variance
sum(nsv$zeroVar)
# None with zero variance
sum(nsv$nzv)
# One variable, which is new_window
## Remove new_window from data sets
train <- train[,setdiff(names(train),"new_window")]
test <- test[,setdiff(names(test), "new_window")]
testing <- testing[,setdiff(names(testing), "new_window")]
View(train)
library(ggplot2)
class(train$classe)
train$classe <- as.factor(train$classe)
class(train$classe)
?qplot
View(train)
quartz(raw_timestamp_part_1, classe, data = train)
qplot(raw_timestamp_part_1, classe, data = train)
qplot(aes_string(x = "raw_timestamp_part_1",y = "classe"), data = train)
ggplot(aes_string(x = "raw_timestamp_part_1",y = "classe"), data = train) + geom_point()
names(train)
loop_predictors <- names(train)[3:58]
loop_predictors
for (i in loop_predictors){
ggplot(aes_string(x = i,y = "classe"), data = train) + geom_point()
}
loop_predictors
ggplot(aes_string(x = i,y = "classe"), data = train) + geom_point()
for (i in loop_predictors){
ggplot(aes_string(x = i,y = "classe"), data = train) + geom_point()
}
loop_predictors[1]
ggplot(aes_string(x = loop_predictors[1],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[2],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[3],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[4],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[5],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[6],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[7],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[8],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[9],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[10],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[11],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[12],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[13],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[15],y = "classe"), data = train) + geom_point()
ggplot(aes_string(x = loop_predictors[14],y = "classe"), data = train) + geom_point()
loop_predictors
featurePlot(x = train[, loop_predictors], y = train$classe, plot = "pairs")
train[, loop_predictors]
loop_predictors
train[, loop_predictors[1:10]]
featurePlot(x = train[, loop_predictors[1:10]], y = train$classe, plot = "pairs")
featurePlot(x = train[, loop_predictors[1:3]], y = train$classe, plot = "pairs")
loop_predictors[1:3]
featurePlot(x = train[, loop_predictors[10:13]], y = train$classe, plot = "pairs")
featurePlot(x = train[, loop_predictors[10:13]], y = train$classe, plot = "pairs")
View(train)
names(train)
setdiff(names(train), c("V1", "new_window"))
setdiff(names(train), c("V1", "user_name"))
train <- train[, setdiff(names(train), c("V1", "user_name"))]
test <- test[, setdiff(names(train), c("V1", "user_name"))]
testing <- testing[, setdiff(names(testing), c("V1", "user_name"))]
names(train)
names(train)[1:56]
loop_predictors <- names(train)[1:56]
?controlRF
?trainControl
controlRF <- trainControl(method = "cv", 5)
controlRF <- trainControl(method = "cv", 5)
## Run model
View(train)
names(train)
?grep
grep("time", names(train), value = TRUE)
train <- train[, setdiff(names(train), grep("time", names(train), value = TRUE))]
test <- test[, setdiff(names(test), grep("time", names(train), value = TRUE))]
testing <- testing[, setdiff(names(testing), grep("time", names(train), value = TRUE))]
train$classe <- as.factor(train$classe)
featurePlot(x = train[, 7:10], y = train$classe, plot = "pairs")
test <- test[, setdiff(names(test), grep("time", names(train), value = TRUE))]
test <- test[, setdiff(names(test), grep("time", names(test), value = TRUE))]
testing <- testing[, setdiff(names(testing), grep("time", names(testing), value = TRUE))]
controlRF <- trainControl(method = "cv", 5)
## Run model
View(train)
grep("time|window", names(train), value = TRUE)
train <- train[, setdiff(names(train), grep("time|window", names(train), value = TRUE))]
test <- test[, setdiff(names(test), grep("time|window", names(test), value = TRUE))]
testing <- testing[, setdiff(names(testing), grep("time|window", names(testing), value = TRUE))]
View(train)
modelRF <- train(classe ~ ., data = train, method = "rf", trControl = controlRF, ntree = 250)
modelRF
predictRF <- predict(modelRF, test)
confusionMatrix(test$classe, predictRF)
?postResample
accuracy <- postResample(predictRF, test$classe)
predictRF
test$classe
length(test$classe)
length(predictRF)
accuracy <- postResample(predictRF, test$classe)
predictRF
test$classe
modelRF
class(predictRF)
class(test$classe)
test$classe <- as.factor(test$classe)
test$classe <- as.factor(test$classe)
testing$classe <- as.factor(testing$classe)
class(testing#classe)
class(testing#classe)
class(testing$classe)
View(testing)
accuracy <- postResample(predictRF, test$classe)
accuracy
(1-as.numeric(confusionMatrix(test$classe, predictRF)$overall[1]))
confusionMatrix(test$classe, predictRF)$overall[1]
confusionMatrix(test$classe, predictRF)
oose <- (1-as.numeric(confusionMatrix(test$classe, predictRF)$overall[1]))
oose
View(testing)
head(testing[,-problem_id])
x <- testing[-problem_id]
View(testing)
x <- testing[-"problem_id"]
setdiff(names(testing), c("problem_id"))
result <- predict(modelRF, testing[, setdiff(names(testing), c("problem_id"))])
result
library(rattle)
library(rpart)
library(rpart.plot)
treeModel <- rpart(classe ~ ., data = train, method = "class")
fancyRpartPlot(treeModel)
quartz()
fancyRpartPlot(treeModel)
quartz()
fancyRpartPlot(treeModel)
predictTree <- predict(treeModel, test, type = "class")
confusionMatrix(predictTree, test$classe)
accuracyTree <- postResample(predictTree, test$classe)
accuracyTree
ooseTree <- (1-as.numeric(confusionMatrix(test$classe, predictTree)$overall[1]))
ooseTree
resultTree <- predict(treeModel, testing[, setdiff(names(testing), c("problem_id"))])
resultTree
testing[, setdiff(names(testing), c("problem_id"))]
dev.off()
quartz()
fancyRpartPlot(treeModel)
dev.copy(png, file = "/Users/sommpd10/Desktop/Programming Resources/datasciencecoursera/Practical-Machine-Learning/Course Project/TreePlot.png", width = 12, height = 8, units = "in", res = 600, bg = "white")
dev.off()
dev.off()
dev.off()
treeModel
result
class(result)
result <- predict(modelRF, testing[, setdiff(names(testing), c("problem_id"))])
result
c(result)
RF_result <- class(c(result))
class(c(result))
as.vector(result)
as.vector(result)
RF_result <- as.vector(result)
RF_result
class(RF_result)
rm(RF_result)
answers <- as.vector(result)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
getwd()
setwd("/Users/sommpd10/Desktop/Programming Resources/datasciencecoursera/Practical-Machine-Learning/Course Project/Submission Files")
pml_write_files(answers)
