names(outcome_data)[col_num] <- "Outcome"
# Renames the third column "Outcome"
# ref: http://rprogramming.net/rename-columns-in-r/
outcome_subset <- subset(outcome_data, State == state & Outcome != "Not Available", select = c(2, 7, col_num))
# ref: http://www.ats.ucla.edu/stat/r/faq/subset_R.htm
# 3) Order the data subset by the mortality rate (second column) and then by Hospital Name
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
# To sort by the outcome, first convert the values in that column to numeric values
outcome.order <- with(outcome_subset, order(outcome_subset$Outcome, outcome_subset$Hospital.Name))
# Sorts the data frame outcome_subset first by the number in the column "Outcome" and then by "Hospital.Name"
# ref: http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
# 4) Create a column with avariable called "rank"
Outcome_Subset_Sorted$rank <- rank(Outcome_Subset_Sorted$Outcome, ties.method = "first")
# 5) Return the name of the hospital in the given state with the given rank
desired_hospital <- Outcome_Subset_Sorted[num, 1]
desired_hospital
}
rankhospital("TX", "heart failure", 4)
View(Outcome_Subset_Sorted)
max <- max(Outcome_Subset_Sorted$rank)
max
rankhospital <- function(state, outcome, num = "best") {
## Section 1 - Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Section 2 - Check that state and outcome are valid
state_list <- unique(outcome_data[, 7])
# unique returns a vector that contains all the unique elements in the 7th column of the outcome data
# ref: http://stat.ethz.ch/R-manual/R-devel/library/base/html/unique.html
if(state %in% state_list == FALSE){
stop("invalid state")
}
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia"){
stop("invalid outcome")
}
## Section 3 - Return hospital name in the given state with the specified rank of 30-day death rate
# 1) Identify the column number
col_num <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
# 2) Make a dataset with three columns: Hospital Name, State, and Outcome (outcome of interest). Drop all rows that are not for the given state
names(outcome_data)[col_num] <- "Outcome"
# Renames the third column "Outcome"
# ref: http://rprogramming.net/rename-columns-in-r/
outcome_subset <- subset(outcome_data, State == state & Outcome != "Not Available", select = c(2, 7, col_num))
# ref: http://www.ats.ucla.edu/stat/r/faq/subset_R.htm
# 3) Order the data subset by the mortality rate (second column) and then by Hospital Name
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
# To sort by the outcome, first convert the values in that column to numeric values
outcome.order <- with(outcome_subset, order(outcome_subset$Outcome, outcome_subset$Hospital.Name))
# Sorts the data frame outcome_subset first by the number in the column "Outcome" and then by "Hospital.Name"
# ref: http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
# 4) Create a column with a variable called "rank"
Outcome_Subset_Sorted$rank <- rank(Outcome_Subset_Sorted$Outcome, ties.method = "first")
# creates a new variable called "rank" that takes on the values of the rank. ties.method = "first" makes sure that rows that are tied in rank are given integer ranks in ascending order.
# ref: http://stat.ethz.ch/R-manual/R-devel/library/base/html/rank.html
# 5) Clean the values of the given num argument
max <- max(Outcome_Subset_Sorted$rank)
# finds the maximum value in the rank column
if(num == "best"){num == 1}
if(num == "worst"){num == max}
# 6) Return the name of the hospital in the given state with the given rank
desired_hospital <- Outcome_Subset_Sorted[num, 1]
desired_hospital
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", "worst")
rankhospital("TX", "heart failure", 294)
Outcome_Subset_Sorted[max, 1]
rankhospital <- function(state, outcome, num = "best") {
## Section 1 - Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Section 2 - Check that state and outcome are valid
state_list <- unique(outcome_data[, 7])
# unique returns a vector that contains all the unique elements in the 7th column of the outcome data
# ref: http://stat.ethz.ch/R-manual/R-devel/library/base/html/unique.html
if(state %in% state_list == FALSE){
stop("invalid state")
}
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia"){
stop("invalid outcome")
}
## Section 3 - Return hospital name in the given state with the specified rank of 30-day death rate
# 1) Identify the column number
col_num <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
# 2) Make a dataset with three columns: Hospital Name, State, and Outcome (outcome of interest). Drop all rows that are not for the given state
names(outcome_data)[col_num] <- "Outcome"
# Renames the third column "Outcome"
# ref: http://rprogramming.net/rename-columns-in-r/
outcome_subset <- subset(outcome_data, State == state & Outcome != "Not Available", select = c(2, 7, col_num))
# ref: http://www.ats.ucla.edu/stat/r/faq/subset_R.htm
# 3) Order the data subset by the mortality rate (second column) and then by Hospital Name
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
# To sort by the outcome, first convert the values in that column to numeric values
outcome.order <- with(outcome_subset, order(outcome_subset$Outcome, outcome_subset$Hospital.Name))
# Sorts the data frame outcome_subset first by the number in the column "Outcome" and then by "Hospital.Name"
# ref: http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
# 4) Create a column with a variable called "rank"
Outcome_Subset_Sorted$rank <- rank(Outcome_Subset_Sorted$Outcome, ties.method = "first")
# creates a new variable called "rank" that takes on the values of the rank. ties.method = "first" makes sure that rows that are tied in rank are given integer ranks in ascending order.
# ref: http://stat.ethz.ch/R-manual/R-devel/library/base/html/rank.html
# 5) Clean the values of the given num argument
max <- max(Outcome_Subset_Sorted$rank)
# finds the maximum value in the rank column
if(num == "best"){num <- 1}
if(num == "worst"){num <- max}
# 6) Return the name of the hospital in the given state with the given rank
desired_hospital <- Outcome_Subset_Sorted[num, 1]
desired_hospital
}
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 294)
rankhospital("TX", "heart failure", "worst")
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 300)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
setwd("~/datasciencecoursera/rprog-data-ProgAssignment3-data")
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_outcome_data <- split(outcome_data, outcome_data$date)
state_outcome_data <- split(outcome_data, outcome_data$State)
setwd("~/datasciencecoursera/rprog-data-ProgAssignment3-data")
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
names(outcome_data)[11] <- "Outcome"
outcome_subset <- subset(outcome_data, Outcome != "Not Available", select = c(2, 7, 11))
View(outcome_subset)
state_outcome_data <- split(outcome_subset, outcome_subset$State)
View(outcome_subset)
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
outcome.order <- with(outcome_subset, order(outcome_subset$State, outcome_subset$Outcome, outcome_subset$Hospital.Name))
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
View(Outcome_Subset_Sorted)
setwd("~/datasciencecoursera/rprog-data-ProgAssignment3-data")
setwd("~/datasciencecoursera/rprog-data-ProgAssignment3-data")
rankhospital <- function(state, outcome, num = "best") {
## Section 1 - Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Section 2 - Check that state and outcome are valid
state_list <- unique(outcome_data[, 7])
# unique returns a vector that contains all the unique elements in the 7th column of the outcome data
# ref: http://stat.ethz.ch/R-manual/R-devel/library/base/html/unique.html
if(state %in% state_list == FALSE){
stop("invalid state")
}
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia"){
stop("invalid outcome")
}
## Section 3 - Return hospital name in the given state with the specified rank of 30-day death rate
# 1) Identify the column number
col_num <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
# 2) Make a dataset with three columns: Hospital Name, State, and Outcome (outcome of interest). Drop all rows that are not for the given state
names(outcome_data)[col_num] <- "Outcome"
# Renames the third column "Outcome"
# ref: http://rprogramming.net/rename-columns-in-r/
outcome_subset <- subset(outcome_data, State == state & Outcome != "Not Available", select = c(2, 7, col_num))
# ref: http://www.ats.ucla.edu/stat/r/faq/subset_R.htm
# 3) Order the data subset by the mortality rate (second column) and then by Hospital Name
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
# To sort by the outcome, first convert the values in that column to numeric values
outcome.order <- with(outcome_subset, order(outcome_subset$Outcome, outcome_subset$Hospital.Name))
# Sorts the data frame outcome_subset first by the number in the column "Outcome" and then by "Hospital.Name"
# ref: http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
# 5) Clean the values of the given num argument
max <- max(Outcome_Subset_Sorted$rank)
# finds the maximum value in the rank column
if(num == "best"){num <- 1}
if(num == "worst"){num <- max}
# 6) Return the name of the hospital in the given state with the given rank
desired_hospital <- Outcome_Subset_Sorted[num, 1]
desired_hospital
}
rankhospital("TX", "heart failure", 4)
library(datasets)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")])
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")]))
s
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")]))
?lapply
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R")]))
library(datasets)
s <- split(airquality, airquality$Month)
t <- sapply(s, function(x){
x$Ozone[2]
})
s
df <- data.frame(ozone = t)
View(df)
View(df)
View(df)
row.names(df) = names(s)
View(df)
View(df)
df
setwd("~/datasciencecoursera/rprog-data-ProgAssignment3-data")
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
names(outcome_data)[11] <- "Outcome"
outcome_subset <- subset(outcome_data, Outcome != "Not Available", select = c(2, 7, 11))
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
outcome.order <- with(outcome_subset, order(outcome_subset$State, outcome_subset$Outcome, outcome_subset$Hospital.Name))
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
View(Outcome_Subset_Sorted)
state_outcome_data <- split(Outcome_Subset_Sorted, Outcome_Subset_Sorted$State)
state_outcome_data
View(Outcome_Subset_Sorted)
View(Outcome_Subset_Sorted)
})
t <- sapply(state_outcome_data, function(x){
x$Hospital.Name[1]
})
t
df <- data.frame(hospital = t)
df
View(df)
row.names(df) = names(state_outcome_data)
df
View(df)
df$state <- row.names(df)
View(df)
View(df)
hospitals_by_rank <- sapply(state_outcome_data, function(x){
x$rank <- rank(x$Outcome, ties.method = "first")
max <- max(x$rank)
if(num == "best"){num <- 1}
if(num == "worst"){num <- max}
x$Hospital.Name[1]
})
hospitals_by_rank <- sapply(state_outcome_data, function(x){
x$rank <- rank(x$Outcome, ties.method = "first")
max <- max(x$rank)
x$Hospital.Name[1]
})
View(df)
setwd("~/datasciencecoursera/rprog-data-ProgAssignment3-data")
rankall <- function(outcome, num = "best") {
## Section 1 - Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Section 2 - Check that outcome argument is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia"){
stop("invalid outcome")
}
## Section 3 - For each state, find the hospital of the given rank
# 1) Subset the data
# a) Identify the column number
col_num <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
names(outcome_data)[col_num] <- "Outcome"
# Renames the column "Outcome"
# ref: http://rprogramming.net/rename-columns-in-r/
# b) Make a dataset with three columns: Hospital Name, State, and Outcome. Drop all rows that are not for the given state
outcome_subset <- subset(outcome_data, Outcome != "Not Available", select = c(2, 7, col_num))
# ref: http://www.ats.ucla.edu/stat/r/faq/subset_R.htm
# 2) Sort by state, then Outcome rate, then hospital name
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
# First convert the values in that column to numeric values
outcome.order <- with(outcome_subset, order(outcome_subset$State, outcome_subset$Outcome, outcome_subset$Hospital.Name))
# Sorts the data frame outcome_subset first by the number in the column "Outcome" and then by "Hospital.Name"
# ref: http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
# 3) Clean values for num
# 3) Split the cleaned data by state
state_outcome_data <- split(outcome_subset, outcome_data$State)
# 4) Find the hospital from each state with the given rank
hospitals_by_rank <- sapply(state_outcome_data, function(x){
x$rank <- rank(x$Outcome, ties.method = "first")
max <- max(x$rank)
if(num == "best"){num <- 1}
if(num == "worst"){num <- max}
x$Hospital.Name[num]
})
df <- data.frame(hospital = hospitals_by_rank)
df$state <- row.names(df)
df
}
head(rankall("heart attack", 20), 10)
rankall("heart attack", 1)
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
names(outcome_data)[11] <- "Outcome"
outcome_subset <- subset(outcome_data, Outcome != "Not Available", select = c(2, 7, 11))
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
outcome.order <- with(outcome_subset, order(outcome_subset$State, outcome_subset$Outcome, outcome_subset$Hospital.Name))
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
View(Outcome_Subset_Sorted)
state_outcome_data <- split(Outcome_Subset_Sorted, Outcome_Subset_Sorted$State)
})
})
hospitals_by_rank <- sapply(state_outcome_data, function(x)
x$Hospital.Name[1]
)
df <- data.frame(hospital = hospitals_by_rank)
View(df)
df$state <- row.names(df)
View(df)
row.names(df) = names(state_outcome_data)
View(df)
df
rankall <- function(outcome, num = "best") {
## Section 1 - Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Section 2 - Check that outcome argument is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia"){
stop("invalid outcome")
}
## Section 3 - For each state, find the hospital of the given rank
# 1) Subset the data
# a) Identify the column number
col_num <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
names(outcome_data)[col_num] <- "Outcome"
# Renames the column "Outcome"
# ref: http://rprogramming.net/rename-columns-in-r/
# b) Make a dataset with three columns: Hospital Name, State, and Outcome. Drop all rows that are not for the given state
outcome_subset <- subset(outcome_data, Outcome != "Not Available", select = c(2, 7, col_num))
# ref: http://www.ats.ucla.edu/stat/r/faq/subset_R.htm
# 2) Sort by state, then Outcome rate, then hospital name
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
# First convert the values in that column to numeric values
outcome.order <- with(outcome_subset, order(outcome_subset$State, outcome_subset$Outcome, outcome_subset$Hospital.Name))
# Sorts the data frame outcome_subset first by the number in the column "Outcome" and then by "Hospital.Name"
# ref: http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
# 3) Clean values for num
# 3) Split the cleaned data by state
state_outcome_data <- split(outcome_subset, outcome_data$State)
# 4) Find the hospital from each state with the given rank
hospitals_by_rank <- sapply(state_outcome_data, function(x)
x$rank <- rank(x$Outcome, ties.method = "first")
max <- max(x$rank)
if(num == "best"){num <- 1}
if(num == "worst"){num <- max}
x$Hospital.Name[num]
)
df <- data.frame(hospital = hospitals_by_rank)
df$state <- row.names(df)
df
}
rankall <- function(outcome, num = "best") {
## Section 1 - Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Section 2 - Check that outcome argument is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia"){
stop("invalid outcome")
}
## Section 3 - For each state, find the hospital of the given rank
# 1) Subset the data
# a) Identify the column number
col_num <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
names(outcome_data)[col_num] <- "Outcome"
# Renames the column "Outcome"
# ref: http://rprogramming.net/rename-columns-in-r/
# b) Make a dataset with three columns: Hospital Name, State, and Outcome. Drop all rows that are not for the given state
outcome_subset <- subset(outcome_data, Outcome != "Not Available", select = c(2, 7, col_num))
# ref: http://www.ats.ucla.edu/stat/r/faq/subset_R.htm
# 2) Sort by state, then Outcome rate, then hospital name
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
# First convert the values in that column to numeric values
outcome.order <- with(outcome_subset, order(outcome_subset$State, outcome_subset$Outcome, outcome_subset$Hospital.Name))
# Sorts the data frame outcome_subset first by the number in the column "Outcome" and then by "Hospital.Name"
# ref: http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
# 3) Clean values for num
# 3) Split the cleaned data by state
state_outcome_data <- split(outcome_subset, outcome_data$State)
# 4) Find the hospital from each state with the given rank
hospitals_by_rank <- sapply(state_outcome_data, function(x)
x$rank <- rank(x$Outcome, ties.method = "first")
max <- max(x$rank)
if(num == "best")(num <- 1)
if(num == "worst")(num <- max)
x$Hospital.Name[num]
)
df <- data.frame(hospital = hospitals_by_rank)
df$state <- row.names(df)
df
}
library(datasets)
s <- split(airquality, airquality$Month)
t <- sapply(s, function(x){
x$Ozone[2]
})
df <- data.frame(ozone = t)
row.names(df) = names(s)
df
View(df)
df$Month = row.names(df)
View(df)
s
test1 <- function(num){
s <- split(airquality, airquality$Month)
t <- sapply(s, function(x){
x$rank <- rank(x$Ozone, ties.method = "first")
max <- max(x$rank)
if(num == "best"){num <- 1}
if(num == "worst"){num <- max}
x$Ozone[num]
})
df <- data.frame(ozone = t)
df$Month = row.names(df)
df
}
test1(1)
setwd("~/datasciencecoursera/rprog-data-ProgAssignment3-data")
rankall <- function(outcome, num = "best") {
## Section 1 - Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Section 2 - Check that outcome argument is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia"){
stop("invalid outcome")
}
## Section 3 - For each state, find the hospital of the given rank
# 1) Subset the data
# a) Identify the column number
col_num <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
names(outcome_data)[col_num] <- "Outcome"
# Renames the column "Outcome"
# ref: http://rprogramming.net/rename-columns-in-r/
# b) Make a dataset with three columns: Hospital Name, State, and Outcome. Drop all rows that are not for the given state
outcome_subset <- subset(outcome_data, Outcome != "Not Available", select = c(2, 7, col_num))
# ref: http://www.ats.ucla.edu/stat/r/faq/subset_R.htm
# 2) Sort by state, then Outcome rate, then hospital name
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
# First convert the values in that column to numeric values
outcome.order <- with(outcome_subset, order(outcome_subset$State, outcome_subset$Outcome, outcome_subset$Hospital.Name))
# Sorts the data frame outcome_subset first by the number in the column "Outcome" and then by "Hospital.Name"
# ref: http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
# 3) Clean values for num
# 3) Split the cleaned data by state
state_outcome_data <- split(outcome_subset, outcome_data$State)
# 4) Find the hospital from each state with the given rank
hospitals_by_rank <- sapply(state_outcome_data, function(x){
x$rank <- rank(x$Outcome, ties.method = "first")
max <- max(x$rank)
if(num == "best"){num <- 1}
if(num == "worst"){num <- max}
x$Hospital.Name[num]
})
df <- data.frame(hospital = hospitals_by_rank)
df$state <- row.names(df)
df
}
head(rankall("heart attack", 20), 10)
warnings()
rankall <- function(outcome, num = "best") {
## Section 1 - Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Section 2 - Check that outcome argument is valid
if(outcome != "heart attack" & outcome != "heart failure" & outcome != "pneumonia"){
stop("invalid outcome")
}
## Section 3 - For each state, find the hospital of the given rank
# 1) Subset the data
# a) Identify the column number
col_num <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
names(outcome_data)[col_num] <- "Outcome"
# Renames the column "Outcome"
# ref: http://rprogramming.net/rename-columns-in-r/
# b) Make a dataset with three columns: Hospital Name, State, and Outcome. Drop all rows that are not for the given state
outcome_subset <- subset(outcome_data, Outcome != "Not Available", select = c(2, 7, col_num))
# ref: http://www.ats.ucla.edu/stat/r/faq/subset_R.htm
# 2) Sort by state, then Outcome rate, then hospital name
outcome_subset[, 3] <- as.numeric(outcome_subset[, 3])
# First convert the values in that column to numeric values
outcome.order <- with(outcome_subset, order(outcome_subset$State, outcome_subset$Outcome, outcome_subset$Hospital.Name))
# Sorts the data frame outcome_subset first by the number in the column "Outcome" and then by "Hospital.Name"
# ref: http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
Outcome_Subset_Sorted <- outcome_subset[outcome.order, ]
# 3) Split the cleaned data by state
state_outcome_data <- split(Outcome_Subset_Sorted, Outcome_Subset_Sorted$State)
# 4) Find the hospital from each state with the given rank
hospitals_by_rank <- sapply(state_outcome_data, function(x){
x$rank <- rank(x$Outcome, ties.method = "first")
max <- max(x$rank)
if(num == "best"){num <- 1}
if(num == "worst"){num <- max}
x$Hospital.Name[num]
})
df <- data.frame(hospital = hospitals_by_rank)
df$state <- row.names(df)
df
}
test1 <- function(num){
s <- split(airquality, airquality$Month)
t <- sapply(s, function(x){
x$rank <- rank(x$Ozone, ties.method = "first")
max <- max(x$rank)
if(num == "best"){num <- 1}
if(num == "worst"){num <- max}
x$Ozone[num]
})
df <- data.frame(ozone = t)
df$Month = row.names(df)
df
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
View(df)
a <- head(rankall("heart attack", 20), 10)
a
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
