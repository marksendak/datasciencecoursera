setwd(HCC_out)
write.csv(CC_Subset_2yrs_wide, "CCs_2yrs_wide.csv", row.names=FALSE)
########################################################################
########################################################################
########################################################################
## step 5: Create hierarchy table
# Called "Hierarchy_DF"
# Uses lines from file: V22H79H1.txt
########################################################################
########################################################################
########################################################################
################## A) Read in relevant lines from file V2213L2P.txt
setwd(HCC_V22)
Hierarchy <- readLines("V22H79H1.txt")
Rel_Hierarchy <- Hierarchy[28:58]
################## B) Parse text into a data frame
Rel_Hierarchy <- strsplit(Rel_Hierarchy, " , ")
# Split between " ="
Rel_Hierarchy <- strsplit(as.character(Rel_Hierarchy), "\\%S")
Hierarchy_DF <- data.frame(matrix(unlist(Rel_Hierarchy), nrow=31, byrow=T))
################## C) Clean data frame
Hierarchy_DF$X1 <- str_extract(Hierarchy_DF$X1, "[a-zA-Z]+ [0-9]")
Hierarchy_DF$X2 <- str_extract(Hierarchy_DF$X2, "=[0-9]+")
Hierarchy_DF$X3 <- str_extract(Hierarchy_DF$X3, "\\([0-9]+.* \\)")
Hierarchy_DF$X2 <- str_replace(Hierarchy_DF$X2, "=", "HCC")
Hierarchy_DF$X3 <- str_replace_all(Hierarchy_DF$X3, " |\\)", "")
Hierarchy_DF$X3 <- str_replace_all(Hierarchy_DF$X3, "\\(", "HCC")
Hierarchy_DF$X3 <- str_replace_all(Hierarchy_DF$X3, ",", ",HCC")
## Fix variable names
names(Hierarchy_DF)[names(Hierarchy_DF) == "X1"] <- "Condition"
names(Hierarchy_DF)[names(Hierarchy_DF) == "X2"] <- "HCC"
names(Hierarchy_DF)[names(Hierarchy_DF) == "X3"] <- "To.Zero"
################## D) write out table
setwd(HCC_out)
write.csv(Hierarchy_DF, "Hierarchy_Dataframe.csv", row.names=FALSE)
########################################################################
########################################################################
########################################################################
## step 6: Write function that implements hierarchies
# Uses conditions in "Hierarchy_DF"
# Applies conditions to "CCs_2yrs_wide"
########################################################################
########################################################################
########################################################################
################## A) Define function called "Hierarchy"
Hierarchy <- function(Conditions, Wide_HCC_Database){
Condition_Count <- nrow(Conditions)
Patient_Count <- nrow(Wide_HCC_Database)
for (i in 1:Condition_Count){
colname <- Conditions[i,2]
zero_list <- strsplit(Conditions[i,3], split=",")
for (j in 1:Patient_Count){
if(Wide_HCC_Database[j, colname] == 1){
for (k in zero_list){
Wide_HCC_Database[j, k] = 0
}
}
}
print(i)
}
Wide_HCC_Database
}
################## B) Implement hierarchies on CC_Subset_2yrs_wide
HCC_2yrs_wide <- Hierarchy(Hierarchy_DF, CC_Subset_2yrs_wide)
################## C) Write out table
setwd(HCC_out)
write.csv(HCC_2yrs_wide, "HCC_2yrs_wide.csv", row.names=FALSE)
########################################################################
########################################################################
########################################################################
## step 7: Make wide HCC data set with labels
# Uses data set "HCC_Labels" created in step 3
########################################################################
########################################################################
########################################################################
################## A) Insert first row in labels for patient identifier
row1 <- c("row1", "Patient.Identifier")
HCC_Labels <- rbind(row1, HCC_Labels)
################## B) Assign column labels
HCC_2yrs_wide_labeled <- HCC_2yrs_wide
colnames(HCC_2yrs_wide_labeled) <- HCC_Labels$HCC.Label
################## C) Write out table
setwd(HCC_out)
write.csv(HCC_2yrs_wide_labeled, "HCC_2yrs_wide_labeled.csv", row.names=FALSE)
data_in <- "/Users/sommpd10/Desktop/DukeMed/Research/Visualization_Analytics/Heart Clinic"
setwd(data_in)
?read.csv
HCCs <- read.csv("./HCCs/HCC_2yrs_wide_labeled.csv", header=TRUE)
View(HCCs)
sapply(HCCs, function(x) (sum(x)/length(x)))
Frequencies <- sapply(HCCs, function(x) (sum(x)/length(x)))
Frequencies <- as.data.frame(sapply(HCCs, function(x) (sum(x)/length(x))))
View(Frequencies)
sum(HCCs$HIV.AIDS)
length(HCCs$HIV.AIDS))
length(HCCs$HIV.AIDS)
sum(HCCs$HIV.AIDS)/length(HCCs$HIV.AIDS)
width <- ncol(HCCs)
Frequencies <- as.data.frame(sapply(HCCs[2:width], function(x) (sum(x)/length(x))))
View(Frequencies)
library(plyr)
colnames(Frequencies)
colnames(Frequencies) <- "Frequency"
colnames(Frequencies)
Frequencies <- arrange(Frequencies, desc(Frequencies))
View(Frequencies)
?as.data.frame
Frequencies <- as.data.frame(sapply(HCCs[2:width], function(x) (sum(x)/length(x))), row.names = NULL)
colnames(Frequencies) <- "Frequency"
View(Frequencies)
?arrange
Frequencies <- data.frame(sapply(HCCs[2:width], function(x) (sum(x)/length(x))), row.names = NULL)
View(Frequencies)
Frequencies <- data.frame(sapply(HCCs[2:width], function(x) (sum(x)/length(x))))
View(Frequencies)
colnames(Frequencies) <- c("Disease", "Frequency")
colnames(Frequencies)
View(Frequencies)
colnames(Frequencies) <- "Frequency"
View(Frequencies)
?order
order(Frequencies, decreasing = TRUE)
Frequencies[order(Frequencies, decreasing = TRUE),]
Frequencies <- Frequencies[order(Frequencies, decreasing = TRUE),]
Frequencies <- data.frame(sapply(HCCs[2:width], function(x) (sum(x)/length(x))))
colnames(Frequencies) <- "Frequency"
View(Frequencies)
Frequencies$Disease = rownames(Frequencies)
View(Frequencies)
rownames(Frequencies) = NULL
View(Frequencies)
Frequencies <- Frequencies[,c(2,1)]
View(Frequencies)
Frequencies <- Frequencies[order(Frequencies, decreasing = TRUE),]
View(Frequencies)
Frequencies <- data.frame(sapply(HCCs[2:width], function(x) (sum(x)/length(x))))
colnames(Frequencies) <- "Frequency"
Frequencies$Disease = rownames(Frequencies)
rownames(Frequencies) = NULL
Frequencies <- Frequencies[,c(2,1)]
View(Frequencies)
Frequencies <- Frequencies[order(Frequency, decreasing = TRUE),]
Frequencies <- Frequencies[order("Frequency", decreasing = TRUE),]
View(Frequencies)
Frequencies <- data.frame(sapply(HCCs[2:width], function(x) (sum(x)/length(x))))
colnames(Frequencies) <- "Frequency"
Frequencies$Disease = rownames(Frequencies)
rownames(Frequencies) = NULL
Frequencies <- Frequencies[,c(2,1)]
View(Frequencies)
Frequencies[order(Frequency, decreasing = TRUE),]
Frequencies <- Frequencies[order(Frequencies$Frequency, decreasing = TRUE),]
View(Frequencies)
?write.csv
write.csv(Frequencies, file = "Comorbidity_Frequency.csv")
write.csv(Frequencies, file = "Comorbidity_Frequency.csv", row.names = FALSE)
View(HCCs)
HCCs_unlabeled <- read.csv("./HCCs/HCC_2yrs_wide.csv", header=TRUE)
View(HCCs_unlabeled)
View(HCCs)
#### This code builds HCC categories
#### Date: July 5, 2014
#### Author: Mark Dakkak
################## Set these values ##################
## Custom Locations
DEDUCE <- "/Users/sommpd10/Desktop/DukeMed/Research/Visualization_Analytics/Heart Clinic"
# CHANGE THIS TO WHEREVER THE DEDUCE OUTPUT IS
HCC_out <- "/Users/sommpd10/Desktop/DukeMed/Research/Visualization_Analytics/Heart Clinic/HCCs"
# CHANGE THIS TO WHEREVER YOU WANT TO WRITE FILES OUT TO
HCC_V22 <- "/Users/sommpd10/Desktop/DukeMed/Research/CCNC/CMS HCC Folders/2014-InitialModel/CMS-HCC software V2213.79.L2"
# CHANGE THIS TO WHEREVER YOU HAVE THE CMS FILE LOCATED
## Custom Dates
Start_Date <- as.Date("2012-08-01")
End_Date <- as.Date("2014-07-31")
################## Load packages ##################
library(stringr)
library(reshape2)
library(plyr)
library(graphics)
########################################################################
########################################################################
########################################################################
## step 1: Merge ICD9 codes and condition categories (CCs)
# Uses file: "F2213L2P.txt" to map between ICD9s and Condition Categories
########################################################################
########################################################################
########################################################################
################## A) Read in ICD9 Codes
setwd(DEDUCE)
ICD9_codes <- read.table("ICD9s_patientdiagnoses.txt", header=TRUE)
#### Fix format of Diagnosis.Date
ICD9_codes$Diagnosis.Date <- as.Date(word(as.character(ICD9_codes$Diagnosis.Date), 1), format="%m/%d/%Y")
#### Clean ICD9 codes by removing all periods
ICD9_codes$ICD.Diagnosis.Code <- as.character(ICD9_codes$ICD.Diagnosis.Code)
ICD9_codes$ICD.Diagnosis.Code <- gsub("\\.", "", ICD9_codes$ICD.Diagnosis.Code)
# Use \\ to escape and indicate that you're actually looking for a period
################## B) Read in CC codes
setwd(HCC_V22)
CC_crosswalk <- read.table("F2213L2P.TXT")
################## C) Merge ICD9 and CC codes
CCs <- merge(ICD9_codes, CC_crosswalk, by.x = "ICD.Diagnosis.Code", by.y="V1")
## Reformat Condition Category file
CCs <- CCs[, c("Patient.Identifier", "ICD.Diagnosis.Code", "Diagnosis.Date", "V2")]
names(CCs)[names(CCs)=="V2"] <- "Condition.Category"
################## D) Write out table
setwd(HCC_out)
write.csv(CCs, "Condition_Categories.csv", row.names=FALSE)
########################################################################
########################################################################
########################################################################
## step 2: subset condition categories to 79 CCs
## Uses lines from file V2213L2P.txt to narrow down to 79 relevant CCs
########################################################################
########################################################################
########################################################################
################## A) Read in relevant lines from file V2213L2P.txt
setwd(HCC_V22)
Relevant_CCs <- readLines("V2213L2P.txt")
Relevant_CCs <- Relevant_CCs[164:174]
################## B) Parse text
Relevant_CCs <- strsplit(Relevant_CCs, " +")
# Split between spaces
Relevant_CCs <- unlist(Relevant_CCs)
# Convert list to a character vector
Relevant_CCs <- Relevant_CCs[Relevant_CCs != ""]
# Drop empty characters
Relevant_CC_Numbers <- str_extract(Relevant_CCs, "[0-9]+")
# Extract numbers
Relevant_CC_Numbers <- as.factor(Relevant_CC_Numbers)
################## C) Subset data
CCs$Condition.Category <- as.factor(CCs$Condition.Category)
CC_Subset <- subset(CCs, Condition.Category %in% Relevant_CC_Numbers)
class(CCs$Condition.Category)
## Apparently already have subset
################## D) Change from CC to HCC
names(CC_Subset)[names(CC_Subset) == "Condition.Category"] <- "HCC"
########################################################################
########################################################################
########################################################################
## step 3: Prepare HCC labels
# Uses lines from file: V22H79L1.txt
########################################################################
########################################################################
########################################################################
################## A) Read in relevant lines from file V2213L2P.txt
setwd(HCC_V22)
HCC_labels <- readLines("V22H79L1.txt")
Relevant_HCCs <- HCC_labels[9:87]
################## B) Parse text and clean data frame
Relevant_HCCs <- strsplit(Relevant_HCCs, " =")
# Split between " ="
HCC_Labels <- data.frame(matrix(unlist(Relevant_HCCs), nrow=79, byrow=T))
## Clean data frame
names(HCC_Labels)[names(HCC_Labels)=="X1"] <- "HCC"
names(HCC_Labels)[names(HCC_Labels)=="X2"] <- "HCC.Label"
HCC_Labels$HCC <- str_extract(HCC_Labels$HCC, "[0-9]+")
HCC_Labels$HCC.Label <- str_replace_all(HCC_Labels$HCC.Label, '"', "")
################## C) Write out table
setwd(HCC_out)
write.csv(HCC_Labels, "HCC_Labels.csv", row.names=FALSE)
########################################################################
########################################################################
########################################################################
## step 4: Reshape data to make 1 row-per-patient database with all relevant CCs
########################################################################
########################################################################
########################################################################
################## A) Filter to two years of data and keep patient ID and HCC
CC_Subset$Diagnosis.Date <- as.Date(CC_Subset$Diagnosis.Date, format="%Y-%m-%d")
CC_Subset_2yrs <- subset(CC_Subset, Diagnosis.Date >= Start_Date & Diagnosis.Date <= End_Date, select = c("Patient.Identifier", "HCC"))
################## B) Transform data from long and skinny to short and wide
## Do this by creating dummy variables for every level of the factor variable, HCC
CC_Subset_2yrs_wide <- model.matrix(~ Patient.Identifier + HCC, CC_Subset_2yrs,         contrasts.arg=list(HCC=contrasts(CC_Subset_2yrs$HCC, contrasts=F)))
CC_Subset_2yrs_wide <- as.data.frame(CC_Subset_2yrs_wide)
width <- ncol(CC_Subset_2yrs_wide)
CC_Subset_2yrs_wide <- CC_Subset_2yrs_wide[, 2:width]
################## C) Collapse data by patient ID and calculate the max value in each column
CC_Subset_2yrs_wide <- aggregate(CC_Subset_2yrs_wide, by=list(CC_Subset_2yrs_wide$Patient.Identifier), FUN=max)
width <- ncol(CC_Subset_2yrs_wide)
CC_Subset_2yrs_wide <- CC_Subset_2yrs_wide[, 2:width]
################## D) Fill in any gaps in the table (HCCs for which all patients have 0s)
width <- ncol(CC_Subset_2yrs_wide)
Missing_Columns <- paste("HCC", setdiff(Relevant_CC_Numbers, gsub("HCC", "", colnames(CC_Subset_2yrs_wide[,2:width]))), sep = "")
for(i in Missing_Columns){
CC_Subset_2yrs_wide[,i] = 0
}
View(CC_Subset_2yrs_wide)
names(CC_Subset_2yrs_wide)
test <- CC_Subset_2yrs_wide[1:10,]
names(test)
View(test)
test <- test[,order(names(test))]
View(test)
setwd(HCC_out)
write.csv(CC_Subset_2yrs_wide, "CCs_2yrs_wide.csv", row.names=FALSE)
########################################################################
########################################################################
########################################################################
## step 5: Create hierarchy table
# Called "Hierarchy_DF"
# Uses lines from file: V22H79H1.txt
########################################################################
########################################################################
########################################################################
################## A) Read in relevant lines from file V2213L2P.txt
setwd(HCC_V22)
Hierarchy <- readLines("V22H79H1.txt")
Rel_Hierarchy <- Hierarchy[28:58]
################## B) Parse text into a data frame
Rel_Hierarchy <- strsplit(Rel_Hierarchy, " , ")
# Split between " ="
Rel_Hierarchy <- strsplit(as.character(Rel_Hierarchy), "\\%S")
Hierarchy_DF <- data.frame(matrix(unlist(Rel_Hierarchy), nrow=31, byrow=T))
################## C) Clean data frame
Hierarchy_DF$X1 <- str_extract(Hierarchy_DF$X1, "[a-zA-Z]+ [0-9]")
Hierarchy_DF$X2 <- str_extract(Hierarchy_DF$X2, "=[0-9]+")
Hierarchy_DF$X3 <- str_extract(Hierarchy_DF$X3, "\\([0-9]+.* \\)")
Hierarchy_DF$X2 <- str_replace(Hierarchy_DF$X2, "=", "HCC")
Hierarchy_DF$X3 <- str_replace_all(Hierarchy_DF$X3, " |\\)", "")
Hierarchy_DF$X3 <- str_replace_all(Hierarchy_DF$X3, "\\(", "HCC")
Hierarchy_DF$X3 <- str_replace_all(Hierarchy_DF$X3, ",", ",HCC")
## Fix variable names
names(Hierarchy_DF)[names(Hierarchy_DF) == "X1"] <- "Condition"
names(Hierarchy_DF)[names(Hierarchy_DF) == "X2"] <- "HCC"
names(Hierarchy_DF)[names(Hierarchy_DF) == "X3"] <- "To.Zero"
################## D) write out table
setwd(HCC_out)
write.csv(Hierarchy_DF, "Hierarchy_Dataframe.csv", row.names=FALSE)
########################################################################
########################################################################
########################################################################
## step 6: Write function that implements hierarchies
# Uses conditions in "Hierarchy_DF"
# Applies conditions to "CCs_2yrs_wide"
########################################################################
########################################################################
########################################################################
################## A) Define function called "Hierarchy"
Hierarchy <- function(Conditions, Wide_HCC_Database){
Condition_Count <- nrow(Conditions)
Patient_Count <- nrow(Wide_HCC_Database)
for (i in 1:Condition_Count){
colname <- Conditions[i,2]
zero_list <- strsplit(Conditions[i,3], split=",")
for (j in 1:Patient_Count){
if(Wide_HCC_Database[j, colname] == 1){
for (k in zero_list){
Wide_HCC_Database[j, k] = 0
}
}
}
print(i)
}
Wide_HCC_Database
}
################## B) Implement hierarchies on CC_Subset_2yrs_wide
HCC_2yrs_wide <- Hierarchy(Hierarchy_DF, CC_Subset_2yrs_wide)
################## C) Write out table
setwd(HCC_out)
write.csv(HCC_2yrs_wide, "HCC_2yrs_wide.csv", row.names=FALSE)
HCC_Labels
HCC_Labels
parse("HCC", HCC_Labels[,1], sep="")
?parse
paste("HCC", HCC_Labels[,1], sep="")
HCC_Labels
HCC_Labels$HCC = paste("HCC", HCC_Labels[,1], sep="")
HCC_Labels
colnames(HCC_2yrs_wide[2:width])
HCC_2yrs_wide_labeled <- HCC_2yrs_wide
View(HCC_2yrs_wide_labeled)
width <- colnum(HCC_2yrs_wide)
?colnumber
??colnum
width <- ncol(HCC_2yrs_wide)
width
colnames(HCC_2yrs_wide[2:width])
HCC_Labels["HCC1",2]
View(HCC_Labels)
HCC_Labels$HCC.Label[HCC_Labels$HCC == HCC1]
HCC_Labels$HCC.Label[HCC_Labels$HCC == "HCC1"]
HCC_2yrs_wide_labeled <- HCC_2yrs_wide
width <- ncol(HCC_2yrs_wide_labeled)
width
for(i in colnames(HCC_2yrs_wide_labeled[2:width])){
names(HCC_2yrs_wide_labeled)[names(HCC_2yrs_wide_labeled) == i] <- HCC_Labels$HCC.Label[HCC_Labels$HCC == i]
}
View(HCC_2yrs_wide_labeled)
################## C) Write out table
setwd(HCC_out)
write.csv(HCC_2yrs_wide_labeled, "HCC_2yrs_wide_labeled.csv", row.names=FALSE)
data_in <- "/Users/sommpd10/Desktop/DukeMed/Research/Visualization_Analytics/Heart Clinic"
setwd(data_in)
################# Load libraries
library(xlsx)
library(plyr)
HCCs <- read.csv("./HCCs/HCC_2yrs_wide_labeled.csv", header=TRUE)
width <- ncol(HCCs)
################# Calculate percentage of patients with each diagnosis
Frequencies <- data.frame(sapply(HCCs[2:width], function(x) (sum(x)/length(x))))
colnames(Frequencies) <- "Frequency"
Frequencies$Disease = rownames(Frequencies); rownames(Frequencies) = NULL
Frequencies <- Frequencies[,c(2,1)]
Frequencies <- Frequencies[order(Frequencies$Frequency, decreasing = TRUE),]
View(Frequencies)
################# Print out frequency table
write.csv(Frequencies, file = "Comorbidity_Frequency.csv", row.names = FALSE)
View(HCCs)
round(exp(coef(lm(I(log(gaData$cisits + 1)) ~ gaData$julian))), 5)
getwd()
setwd("/Users/sommpd10/datasciencecoursera/Regression-Models")
getwd
getwd()
load("./gaData.rda")
gaData$julian <- julian(gaData$date)
# Julian dates are from a specific date back in time
head(gaData)
# See that he doesn't have many visits
round(exp(coef(lm(I(log(gaData$cisits + 1)) ~ gaData$julian))), 5)
round(exp(coef(lm(I(log(gaData$visits + 1)) ~ gaData$julian))), 5)
plot(gaData$julian, gaData$visits, pch = 19, col = "darkgrey", xlab = "Julian", ylab = "Visits")
glm <- glm(gaData$visits ~ gaData$julian, family = "poisson")
abline(lm1, col = "red", lwd = 3); lines(gaData$julian, glm1$fitted, family = "poisson")
glm1 <- glm(gaData$visits ~ gaData$julian, family = "poisson")
abline(glm1, col = "red", lwd = 3); lines(gaData$julian, glm1$fitted, family = "poisson")
abline(glm1, col = "red", lwd = 3); lines(gaData$julian, glm1$fitted, family = "poisson", col = "blue")
abline(lm1, col = "red", lwd = 3); lines(gaData$julian, glm1$fitted, family = "poisson", col = "blue")
lm1 <- lm(gaData$visits ~ gaData$julian)
abline(lm1, col = "red", lwd = 3); lines(gaData$julian, glm1$fitted, family = "poisson", col = "blue")
plot(gaData$julian, gaData$visits, pch = 19, col = "darkgrey", xlab = "Julian", ylab = "Visits")
glm1 <- glm(gaData$visits ~ gaData$julian, family = "poisson")
lm1 <- lm(gaData$visits ~ gaData$julian)
abline(lm1, col = "red", lwd = 3); lines(gaData$julian, glm1$fitted, family = "poisson", col = "blue")
plot(glm$fitted, glm1$residuals, pch = 19, col = "grey", ylab = "Residuals", xlab = "Fitted")
install.packages("sandwich")
confint.agnostic <- function (object, parm, level = 0.95, ...)
{
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a <- (1-level)/2; a <- c(a, 1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm, pct))
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
confint(glm1)
confint.agnostic(glm1)
glm2 <- glm(gaData$simplystats ~ julian(gaData$date), offset = log(visits + 1), family = "poisson")
glm2 <- glm(gaData$simplystats ~ julian(gaData$date), offset = log(visits + 1), family = "poisson", data = gaData)
glm2 <- glm(gaData$simplystats ~ julian(gaData$date), offset = log(visits + 1), family = "poisson", data = gaData)
plot(julian(gaData$date), glm2$fitted, col = "blue", pch = 19, xlab = "Date", ylab = "Fitted Counts")
points(julian(gaDate$date), glm1$fitted, col = "red", pch = 19)
points(julian(gaData$date), glm1$fitted, col = "red", pch = 19)
plot(julian(gaData$date), gaData$simplystats/(gaData$visits+1), col = "grey", xlab = "Date", ylab = "Fitted Rates", pch = 19)
lines(julian(gaData$date), glm2$fitted/(gaData$visits+1), col = "blue", lwd = 3)
library(sandwich)
confint.agnostic <- function (object, parm, level = 0.95, ...)
{
cf <- coef(object); pnames <- names(cf)
if (missing(parm))
parm <- pnames
else if (is.numeric(parm))
parm <- pnames[parm]
a <- (1-level)/2; a <- c(a, 1-a)
pct <- stats:::format.perc(a, 3)
fac <- qnorm(a)
ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm, pct))
ses <- sqrt(diag(sandwich::vcovHC(object)))[parm]
ci[] <- cf[parm] + ses %o% fac
ci
}
confint(glm1)
# Confidence intervals computed normally
confint.agnostic(glm1)
n <- 500; x <- seq(0, 4*pi, length = n); y <- sin(x) + rnorm(n, sd = 3)
knots <- seq(0, 8,*pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot)*(x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
n <- 500; x <- seq(0, 4*pi, length = n); y <- sin(x) + rnorm(n, sd = 3)
knots <- seq(0, 8*pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot)*(x - knot))
knots
splineTerms
View(splineTerms)
x
xMat <- cbind(1, x, splineTerms)
View(xMat)
xMat <- cbind(1, x, splineTerms)
# x matrix has 1, x, and all the spline terms
yhat <- predict(lm(y ~ xMat - 1))
# Do (xMat - 1), because included an intercept in the command above
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
splineTerms <- sapply(knots, function(knot) (x > knot)*(x - knot)^2)
xMat <- cbind(1, x, x^2, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
notes4 <- c(261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25)
t <- seq(0, 2, by = .001); n <- length(t)
c4 <- sin(2 * pi * notes4[1] * t); e4 <- sin(2 * pi * notes4[3] * t);
g4 <- sin(2 * pi * notes4[5] * t)
chord <- c4 + e4 + g4 + rnorm(n, 0, 0.3)
x <- sapply(notes4, function(freq) sin(2 * pi * freq * t))
fit <- lm(chord ~ x - 1)
a <- fft(chord); plot(Re(a)^2, type = "l")
