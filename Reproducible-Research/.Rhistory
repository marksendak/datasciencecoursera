GDP <- GDP[2:191, ]
View(GDP)
names(GDP)[names(GDP)=="X"] <- "CountryCode"
View(GDP)
View(ED)
Total <- merge(ED, GDP, by = "CountryCode")
View(Total)
View(ED)
Total$Ranking <- as.integer(Total$Ranking)
class(Total$Ranking)
## Sort by GDP
sorted_Total <- Total[order(-Total$Ranking), ]
View(sorted_Total)
View(GDP)
?ppois
qpois(c(14, 16), 15)
q <- c(14, 16)
q
qpois(q, 15)
qpos(14, 15)
install.packages("stats")
install.packages("stats")
library(stats)
qpois(16, 15)
ppois(16, 15)
ppois(14, 15)
(ppois(16, 15) - ppois(14, 15))
ppois(10, 5)
ppois(10, 15)
x <- c(1, 2, 3, 4)
y <- c(2, 3, 4, 5)
xy <- cbind(x, y)
xy
xy <- as.data.frame(cbind(x, y))
xy
xy$z <- (y + 2)
xy
xy[4 <= z <= 6]
xy[4 <= xy$z <= 6]
xy[xy$z >= 4 & xy$z <= 6]
xy[xy$z == 4]
xy
xy$z
xy[xy$z == 4]
class(xy$z)
xy$z
xy[xy$z == 4]
View(xy)
names(xy)
xy[xy$z %in% c(4,5,6)]
xy[xy$z %in% c(4,5,6)]
xy$z %in% c(4,5,6)
xy
x <- c(1, 2, 3, 4)
y <- c(2, 3, 4, 5)
xy <- as.data.frame(cbind(x, y))
xy
xy$z1 <- 1
xy
xy$z2 <- c(2,1)
xy
xy$z3 <- c(3,2,1)
Rep_Research <- "/Users/sommpd10/datasciencecoursera/Reproducible-Research"
setwd(Rep_Research)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
file <- "repdata-data-StormData"
download.file(url, file, method = "curl")
unzip(file, exdir = Rep_Research)
library(data.table)
data <- fread("repdata-data-StormData.csv")
data <- fread("repdata-data-StormData")
data <- fread("repdata-data-StormData.csv")
data <- read.csv("repdata-data-StormData.csv")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
file <- "repdata-data-StormData.csv.bz2"
download.file(url, file, method = "curl")
system("repdata-data-StormData.csv.bz2")
getwd()
data <- fread("repdata-data-StormData.csv.bz2")
data <- fread("repdata-data-StormData.csv")
system("repdata-data-StormData.csv.bz2")
?system
getwd()
syste(file)
system(file)
file <- "repdata-data-StormData.csv.bz2"
system(file)
data <- fread("repdata-data-StormData.csv")
data <- fread("repdata-data-StormData")
data <- fread("repdata-data-StormData.csv.bz2")
sessioninfo()
sessionInfo()
Sys.setlocale('LC_ALL', 'C')
system("repdata-data-StormData.csv.bz2")
data <- read.csv("repdata-data-StormData.csv", header=TRUE)
head(data)
View(data)
names(data)
class(data$EVTYPE)
levels(data$EVTYPE)
table(data$EVTYPE)
names(data)
is.na(data$BGN_DATE)
sum(is.na(data$BGN_DATE))
class(data)
data <- data.table(data)
class(data)
table(data$EVTYPE)
names(data)
class(data$BGN_DATE)
library(stringr)
test <- data[1:100,]
View(test)
word(as.character(test$BGN_DATE), 3)
View(test)
word(as.character(test$BGN_DATE), 1)
data$BGN_DATE <- as.Date(word(as.character(data$BGN_DATE), 1), format="%m/%d/%Y")
View(data)
levels(data$F)
class(data$F)
table(data$F)
table(data$MAG)
class(data$MAG)
to_read = c("NULL", "character", rep("NULL", 4), "character", "character", rep("NULL", 14), "numeric", "numeric", "numeric", "character", "numeric", "character", rep("NULL", 3), "numeric", "numeric", rep("NULL", 3), "numeric")
to_read
names(data)
to_read = c("NULL", "character", rep("NULL", 5), "character", rep("NULL", 14), "numeric", "numeric", "numeric", "character", "numeric", "character", rep("NULL", 3), "numeric", "numeric", rep("NULL", 3), "numeric")
to_read
to_read = c("NULL", "character", rep("NULL", 5), "character", rep("NULL", 14), "numeric", "numeric", "numeric", "character", "numeric", "character", rep("NULL", 9))
to_read
names(data)
Sys.setlocale('LC_ALL', 'C')
######### Read in data #########
to_read = c("NULL", "character", rep("NULL", 5), "character", rep("NULL", 14), "numeric", "numeric", "numeric", "character", "numeric", "character", rep("NULL", 9))
data <- read.csv("repdata-data-StormData.csv", header=TRUE, colClasses=to_read)
View(data)
to_read = c("NULL", "character", rep("NULL", 4), "character", "character", rep("NULL", 14), "numeric", "numeric", "numeric", "character", "numeric", "character", rep("NULL", 9))
## Only read in useful variables: "BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP"
data <- read.csv("repdata-data-StormData.csv", header=TRUE, colClasses=to_read)
View(data)
data <- data.table(data)
######### Convert beginning date to year #########
data$BGN_DATE <- as.Date(word(as.character(data$BGN_DATE), 1), format="%m/%d/%Y")
View(data)
data[,sum(FATALITIES,INJURIES),by=EVTYPE]
test <- data[,sum(FATALITIES,INJURIES),by=EVTYPE]
View(test)
View(data)
test <- data[1:10,]
View(test)
test[,Year:=as.numeric(format(BGN_DATE, "%Y"))]
View(test)
rm(test)
data[,YEAR:=as.numeric(format(BGN_DATE, "%Y"))]
View(data)
test <- data[,sum(FATALITIES,INJURIES),by=(EVTYPE,YEAR)]
test <- data[,sum(FATALITIES,INJURIES),by=("EVTYPE","YEAR")]
test <- data[,sum(FATALITIES,INJURIES),by="EVTYPE,YEAR"]
View(test)
test <- data[1:100,]
View(test)
test <- data[PROPDMGEXP = "K",PROPDMG:= (PROPDMG * 1000)]
test <- data[PROPDMGEXP == "K",PROPDMG:= (PROPDMG * 1000)]
View(test)
test <- data[PROPDMGEXP == "K",PROPDMG:= (PROPDMG * 1,000)]
summary(test$PROPDMG)
View(data)
test <- data
test <- test[PROPDMGEXP == "K",PROPDMG:= (PROPDMG * 1000)]
test <- test[PROPDMGEXP == "K" | "k",PROPDMG:= (PROPDMG * 1000)]
test <- test[PROPDMGEXP == "K" | PROPDMGEXP == "k",PROPDMG:= (PROPDMG * 1000)]
levels(test$PROPDMGEXP)
class(test$PROPDMGEXP)
table(test$PROPDMGEXP)
test <- test[PROPDMGEXP == "H" | PROPDMGEXP == "h",PROPDMG:= (PROPDMG * 100)]
test <- test[PROPDMGEXP == "K" | PROPDMGEXP == "k",PROPDMG:= (PROPDMG * 1000)]
test <- test[PROPDMGEXP == "M" | PROPDMGEXP == "m",PROPDMG:= (PROPDMG * 1000000)]
test <- test[PROPDMGEXP == "B" | PROPDMGEXP == "b",PROPDMG:= (PROPDMG * 1000000000)]
table(test$PROPDMGEXP)
summary(test$PROPDMG[PROPDMG=="B"])
summary(test$PROPDMG[test$PROPDMG=="B"])
summary(test$PROPDMG[test$PROPDMGEXP=="B"])
?paste
paste("PROPDMG","EXP",sep="")
paste("CROPDMG","EXP",sep="")
for(i in c("PROPDMG","CROPDMG")){
Exp <- paste(i,"EXP",sep="")
data <- data[Exp == "H" | Exp == "h",i:= (i * 100)]
data <- data[Exp == "K" | Exp == "k",i:= (i * 1000)]
data <- data[Exp == "M" | Exp == "m",i:= (i * 1000000)]
data <- data[Exp == "B" | Exp == "b",i:= (i * 1000000000)]
}
View(data)
summary(data$CROPDMG[data$CROPDMG=="B"])
summary(data$CROPDMG[data$CROPDMG=="M"])
summary(data$CROPDMG[data$CROPDMG=="m"])
summary(data$CROPDMG[data$CROPDMG=="K"])
summary(data$CROPDMG[data$CROPDMGEXP=="K"])
summary(data$CROPDMG[data$CROPDMGEXP=="K"])
summary(data$PROPDMG[data$PROPDMG=="K"])
summary(data$PROPDMG[data$PROPDMGEXP=="K"])
summary(data$PROPDMG[data$PROPDMGEXP=="M"])
summary(data$PROPDMG[data$PROPDMGEXP=="h"])
summary(data$PROPDMG[data$PROPDMGEXP=="k"])
summary(data$PROPDMG[data$PROPDMGEXP=="K"])
data$PROPDMG[data$PROPDMGEXP=="K"]
head(data$PROPDMG[data$PROPDMGEXP=="K"])
data <- data[PROPDMGEXP == "H" | PROPDMGEXP == "h",PROPDMG:= (PROPDMG * 100)]
data <- data[PROPDMGEXP == "K" | PROPDMGEXP == "k",PROPDMG:= (PROPDMG * 1000)]
data <- data[PROPDMGEXP == "M" | PROPDMGEXP == "m",PROPDMG:= (PROPDMG * 1000000)]
data <- data[PROPDMGEXP == "B" | PROPDMGEXP == "b",PROPDMG:= (PROPDMG * 1000000000)]
View(data)
Rep_Research <- "/Users/sommpd10/datasciencecoursera/Reproducible-Research"
setwd(Rep_Research)
######### Load packages #########
library(data.table)
library(stringr)
Sys.setlocale('LC_ALL', 'C')
## Read in data
to_read = c("NULL", "character", rep("NULL", 4), "character", "character", rep("NULL", 14), "numeric", "numeric", "numeric", "character", "numeric", "character", rep("NULL", 9))
## Only read in useful variables: "BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP"
data <- read.csv("repdata-data-StormData.csv", header=TRUE, colClasses=to_read)
## Convert to data table
data <- data.table(data)
######### Process data #########
## Fix date variable
data$BGN_DATE <- as.Date(word(as.character(data$BGN_DATE), 1), format="%m/%d/%Y")
## Create year variable
data[,YEAR:=as.numeric(format(BGN_DATE, "%Y"))]
View(data)
test <- data
for(i in c("PROPDMG","CROPDMG")){
Exp <- paste(i,"EXP",sep="")
test <- test[Exp == "H" | Exp == "h",i:= (i * 100)]
test <- test[Exp == "K" | Exp == "k",i:= (i * 1000)]
test <- test[Exp == "M" | Exp == "m",i:= (i * 1000000)]
test <- test[Exp == "B" | Exp == "b",i:= (i * 1000000000)]
}
View(test)
test <- test[PROPDMGEXP == "H" | PROPDMGEXP == "h",PROPDMG:= (PROPDMG * 100)]
test <- test[PROPDMGEXP == "K" | PROPDMGEXP == "k",PROPDMG:= (PROPDMG * 1000)]
test <- test[PROPDMGEXP == "M" | PROPDMGEXP == "m",PROPDMG:= (PROPDMG * 1000000)]
test <- test[PROPDMGEXP == "B" | PROPDMGEXP == "b",PROPDMG:= (PROPDMG * 1000000000)]
View(test)
test <- data
View(test)
View(data)
summary(data$PROPDMG[PROPDMGEXP=="K"])
summary(data$PROPDMG[data$PROPDMGEXP=="K"])
summary(data$PROPDMG[data$PROPDMGEXP=="M"])
table(data$PROPDMGEXP)
summary(data$PROPDMG[data$PROPDMGEXP=="B"])
table(data$CROPDMGEXP)
summary(data$CROPDMG[data$CROPDMGEXP=="K"])
summary(data$CROPDMG[data$CROPDMGEXP=="M"])
summary(data$CROPDMG[data$CROPDMGEXP=="B"])
test <- data[1:100,]
View(test)
for(i in c("PROPDMG","CROPDMG")){
Exp <- paste(i,"EXP",sep="")
test[Exp == "H" | Exp == "h",i:= (i * 100)]
test[Exp == "K" | Exp == "k",i:= (i * 1000)]
test[Exp == "M" | Exp == "m",i:= (i * 1000000)]
test[Exp == "B" | Exp == "b",i:= (i * 1000000000)]
}
View(test)
i <- "PROPDMG"
Exp <- paste(i,"EXP",sep="")
Exp
test[Exp == "K" | Exp == "k",i:= (i * 1000)]
View(test)
test[PROPDMGEXP == "K" | PROPDMGEXP == "k",PROPDMG:= (PROPDMG * 1000)]
View(test)
View(data)
RM(test)
rm(test)
data[CROPDMGEXP == "H" | CROPDMGEXP == "h",CROPDMG:= (CROPDMG * 100)]
data[CROPDMGEXP == "K" | CROPDMGEXP == "k",CROPDMG:= (CROPDMG * 1000)]
data[CROPDMGEXP == "M" | CROPDMGEXP == "m",CROPDMG:= (CROPDMG * 1000000)]
data[CROPDMGEXP == "B" | CROPDMGEXP == "b",CROPDMG:= (CROPDMG * 1000000000)]
## Run tests
table(data$PROPDMGEXP)
summary(data$PROPDMG[data$PROPDMGEXP=="K"])
summary(data$PROPDMG[data$PROPDMGEXP=="M"])
summary(data$PROPDMG[data$PROPDMGEXP=="B"])
table(data$CROPDMGEXP)
summary(data$CROPDMG[data$CROPDMGEXP=="K"])
summary(data$CROPDMG[data$CROPDMGEXP=="M"])
summary(data$CROPDMG[data$CROPDMGEXP=="B"])
View(data)
sum(is.na(data$FATALITIES))
sum(is.na(data$INJURIES))
class(data$FATALITIES)
Health <- data[FATALITIES != 0 | INJURIES != 0]
View(Health)
Health_Summary <- Health[,sum(FATALITIES,INJURIES),by="EVTYPE,YEAR"]
View(Health_Summary)
head(Health_Summary)
,INJURIES
Health_Summary <- Health[,sum(FATALITIES),by="EVTYPE,YEAR"]
head(Health_Summary)
Health_Summary <- Health[, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("FATALITIES", "INJURIES")]
View(Health_Summary)
Event_Health_Summary <- Health[, lapply(.SD, sum), by="EVTYPE", .SDcols=c("FATALITIES", "INJURIES")]
View(Event_Health_Summary)
library(plyr)
?arrange
Event_Health_Summary <- arrange(Event_Health_Summary, desc(INJURIES), desc(FATALITIES))
View(Event_Health_Summary)
Event_Health_Summary <- data[(FATALITIES != 0 | INJURIES != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("FATALITIES", "INJURIES")]
View(Event_Health_Summary)
Event_Health_Summary <- arrange(Event_Health_Summary, desc(INJURIES), desc(FATALITIES))
View(Event_Health_Summary)
Dangerous_Events <- Event_Health_Summary$EVTYPE[INJURIES >= 100]
Dangerous_Events <- Event_Health_Summary$EVTYPE[Event_Health_Summary$INJURIES >= 100]
Dangerous_Events
Health_Summary <- Health[EVTYPE %in% Dangerous_Events, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("FATALITIES", "INJURIES")]
View(Health_Summary)
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES))
library(ggplot2)
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES))
g + geom_line()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line()
dev.off
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line()
dev.off
dev.off
dev.off
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line()
dev.off
View(Event_Health_Summary)
Event_Health_Summary[,HEALTH_DAMAGES:=(FATALITIES+INJURIES)]
View(Event_Health_Summary)
Event_Health_Summary <- arrange(Event_Health_Summary, desc(HEALTH_DAMAGES))
View(Event_Health_Summary)
Dangerous_Events <- Event_Health_Summary$EVTYPE[Event_Health_Summary$HEALTH_DAMAGES >= 500]
## Calculate number of deaths and injuries for each year for dangerous events
Health_Summary <- Health[EVTYPE %in% Dangerous_Events, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("FATALITIES", "INJURIES")]
## Create line graph
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line()
dev.off
dev.off
dev.off
dev.off
dev.off
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line() + labs(title="Number of Fatalities per Year \n Due to Different Types of Weather Event", x = "Year", y = "Total Fatalities")
Dangerous_Events <- Event_Health_Summary$EVTYPE[Event_Health_Summary$HEALTH_DAMAGES >= 1500]
## Calculate number of deaths and injuries for each year for dangerous events
Health_Summary <- Health[EVTYPE %in% Dangerous_Events, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("FATALITIES", "INJURIES")]
## Create line graph for fatalities
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line() + labs(title="Number of Fatalities per Year \n Due to Different Types of Weather Event", x = "Year", y = "Total Fatalities")
Dangerous_Events <- Event_Health_Summary$EVTYPE[Event_Health_Summary$HEALTH_DAMAGES >= 500]
Dangerous_Events
View(Event_Health_Summary)
Dangerous_Events <- Event_Health_Summary$EVTYPE[Event_Health_Summary$HEALTH_DAMAGES >= 500]
Dangerous_Events
test <- data[500000:500500,]
View(test)
test[EVTYPE == "TORNADO", EVTYPE="SUBSTITUTE"]
test[EVTYPE == "TORNADO", EVTYPE:="SUBSTITUTE"]
View(test)
data[EVTYPE == "HEAT", EVTYPE:="EXCESSIVE HEAT"]
######### Q1) Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
## Explore event types with greatest health impact
Event_Health_Summary <- data[(FATALITIES != 0 | INJURIES != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("FATALITIES", "INJURIES")]
Event_Health_Summary[,HEALTH_DAMAGES:=(FATALITIES + INJURIES)]
Event_Health_Summary <- arrange(Event_Health_Summary, desc(HEALTH_DAMAGES))
View(Event_Health_Summary)
data[EVTYPE == "WILD/FOREST FIRE", EVTYPE:="WILDFIRE"]
######### Q1) Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
## Explore event types with greatest health impact
Event_Health_Summary <- data[(FATALITIES != 0 | INJURIES != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("FATALITIES", "INJURIES")]
Event_Health_Summary[,HEALTH_DAMAGES:=(FATALITIES + INJURIES)]
Event_Health_Summary <- arrange(Event_Health_Summary, desc(HEALTH_DAMAGES))
View(Event_Health_Summary)
data[EVTYPE == "TSTM WIND", EVTYPE:="THUNDERSTORM WIND"]
######### Q1) Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
## Explore event types with greatest health impact
Event_Health_Summary <- data[(FATALITIES != 0 | INJURIES != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("FATALITIES", "INJURIES")]
Event_Health_Summary[,HEALTH_DAMAGES:=(FATALITIES + INJURIES)]
Event_Health_Summary <- arrange(Event_Health_Summary, desc(HEALTH_DAMAGES))
View(Event_Health_Summary)
data[EVTYPE == "TSTM WIND" | EVTYPE == "THUNDERSTORM WINDS", EVTYPE:="THUNDERSTORM WIND"]
######### Q1) Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
## Explore event types with greatest health impact
Event_Health_Summary <- data[(FATALITIES != 0 | INJURIES != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("FATALITIES", "INJURIES")]
Event_Health_Summary[,HEALTH_DAMAGES:=(FATALITIES + INJURIES)]
Event_Health_Summary <- arrange(Event_Health_Summary, desc(HEALTH_DAMAGES))
View(Event_Health_Summary)
data[EVTYPE == "FLASH FLOOD", EVTYPE:="FLOOD"]
######### Q1) Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
## Explore event types with greatest health impact
Event_Health_Summary <- data[(FATALITIES != 0 | INJURIES != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("FATALITIES", "INJURIES")]
Event_Health_Summary[,HEALTH_DAMAGES:=(FATALITIES + INJURIES)]
Event_Health_Summary <- arrange(Event_Health_Summary, desc(HEALTH_DAMAGES))
View(Event_Health_Summary)
Dangerous_Events <- Event_Health_Summary$EVTYPE[Event_Health_Summary$HEALTH_DAMAGES >= 1376]
Dangerous_Events
## Calculate number of deaths and injuries for each year for dangerous events
Health_Summary <- Health[EVTYPE %in% Dangerous_Events, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("FATALITIES", "INJURIES")]
## Create line graph for fatalities
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line() + labs(title="Number of Fatalities per Year \n Due to Different Types of Weather Event", x = "Year", y = "Total Fatalities")
dev.off
## Create line graph for injuries
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = INJURIES, color = EVTYPE))
g + geom_line()
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = HEALTH_DAMAGES, color = EVTYPE))
g + geom_line() + labs(title="Number of Health Damages per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Health Damages (Injuries + Fatalities)")
View(Health_Summary)
Health_Summary[,HEALTH_DAMAGES:=(FATALITIES + INJURIES)]
View(Health_Summary)
g <- ggplot(Health_Summary, aes(x = YEAR, y = HEALTH_DAMAGES, color = EVTYPE))
g + geom_line() + labs(title="Number of Health Damages per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Health Damages (Injuries + Fatalities)")
## Create line graph for fatalities
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line() + labs(title="Number of Fatalities per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Fatalities")
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = INJURIES, color = EVTYPE))
g + geom_line() + labs(title="Number of Injuries per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Injuries")
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = HEALTH_DAMAGES, color = EVTYPE))
g + geom_line() + labs(title="Number of Health Damages per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Health Damages (Injuries + Fatalities)")
names(data)
Event_Econ_Summary <- data[(PROPDMG != 0 | CROPDMG != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("PROPDMG", "CROPDMG")]
View(Event_Econ_Summary)
Event_Econ_Summary[,ECON_DAMAGES:=(PROPDMG + CROPDMG)]
Event_Econ_Summary <- arrange(Event_Econ_Summary, desc(ECON_DAMAGES))
View(Event_Econ_Summary)
data[EVTYPE == "FLASH FLOOD" | EVTYPE == "RIVER FLOOD", EVTYPE:="FLOOD"]
## Explore event types with greatest economic impact
Event_Econ_Summary <- data[(PROPDMG != 0 | CROPDMG != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("PROPDMG", "CROPDMG")]
Event_Econ_Summary[,ECON_DAMAGES:=(PROPDMG + CROPDMG)]
Event_Econ_Summary <- arrange(Event_Econ_Summary, desc(ECON_DAMAGES))
View(Event_Econ_Summary)
data[EVTYPE == "HURRICANE OPAL", EVTYPE:="HURRICANE"]
Event_Econ_Summary <- data[(PROPDMG != 0 | CROPDMG != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("PROPDMG", "CROPDMG")]
Event_Econ_Summary[,ECON_DAMAGES:=(PROPDMG + CROPDMG)]
Event_Econ_Summary <- arrange(Event_Econ_Summary, desc(ECON_DAMAGES))
View(Event_Econ_Summary)
data[EVTYPE == "HURRICANE OPAL" | EVTYPE == "HURRICANE/TYPHOON" | EVTYPE == "HURRICANE", EVTYPE:="TROPICAL STORM"]
######### Q1) Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
## Explore event types with greatest health impact
Event_Health_Summary <- data[(FATALITIES != 0 | INJURIES != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("FATALITIES", "INJURIES")]
Event_Health_Summary[,HEALTH_DAMAGES:=(FATALITIES + INJURIES)]
Event_Health_Summary <- arrange(Event_Health_Summary, desc(HEALTH_DAMAGES))
View(Event_Health_Summary)
Dangerous_Events <- Event_Health_Summary[1:10,1]
Dangerous_Events
Dangerous_Events <- Event_Health_Summary[[1:10,1]]
View(Event_Health_Summary)
Dangerous_Events <- Event_Health_Summary[1:10,EVTYPE]
Dangerous_Events
Dangerous_Events <- Event_Health_Summary[1:10,EVTYPE]
## Calculate number of deaths and injuries for each year for dangerous events
Health_Summary <- Health[EVTYPE %in% Dangerous_Events, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("FATALITIES", "INJURIES")]
Health_Summary[,HEALTH_DAMAGES:=(FATALITIES + INJURIES)]
## Create line graph for fatalities
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line() + labs(title="Number of Fatalities per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Fatalities")
Event_Econ_Summary <- data[(PROPDMG != 0 | CROPDMG != 0), lapply(.SD, sum), by="EVTYPE", .SDcols=c("PROPDMG", "CROPDMG")]
Event_Econ_Summary[,ECON_DAMAGES:=(PROPDMG + CROPDMG)]
Event_Econ_Summary <- arrange(Event_Econ_Summary, desc(ECON_DAMAGES))
View(Event_Econ_Summary)
Financial_Events <- Event_Econ_Summary[1:10,EVTYPE]
Financial_Events
Econ_Summary <- Econ[EVTYPE %in% Financial_Events, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("PROPDMG", "CROPDMG", "ECON_DAMAGES")]
Health_Summary <- data[EVTYPE %in% Dangerous_Events, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("FATALITIES", "INJURIES")]
Health_Summary[,HEALTH_DAMAGES:=(FATALITIES + INJURIES)]
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = FATALITIES, color = EVTYPE))
g + geom_line() + labs(title="Number of Fatalities per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Fatalities")
dev.off
## Create line graph for total injuries
quartz()
g <- ggplot(Health_Summary, aes(x = YEAR, y = INJURIES, color = EVTYPE))
g + geom_line() + labs(title="Number of Injuries per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Injuries")
Financial_Events
rm(Financial_Events)
Costly_Events <- Event_Econ_Summary[1:10,EVTYPE]
## Calculate number of deaths and injuries for each year for dangerous events
Econ_Summary <- data[EVTYPE %in% Costly_Events, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("PROPDMG", "CROPDMG", "ECON_DAMAGES")]
Econ_Summary <- data[EVTYPE %in% Costly_Events, lapply(.SD, sum), by="EVTYPE,YEAR", .SDcols=c("PROPDMG", "CROPDMG")]
View(Econ_Summary)
Econ_Summary[,ECON_DAMAGES:=(PROPDMG + CROPDMG)]
View(Econ_Summary)
quartz()
g <- ggplot(Econ_Summary, aes(x = YEAR, y = PROPDMG, color = EVTYPE))
g + geom_line() + labs(title="Amount of Property Damage per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Cost of Property Damages (in Dollars)")
quartz()
g <- ggplot(Econ_Summary, aes(x = YEAR, y = CROPDMG, color = EVTYPE))
g + geom_line() + labs(title="Amount of Crop Damage per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Cost of Crop Damages (in Dollars)")
quartz()
g <- ggplot(Econ_Summary, aes(x = YEAR, y = ECON_DAMAGES, color = EVTYPE))
g + geom_line() + labs(title="Total Economic Damage per Year \n Due to Different Types of Weather Events", x = "Year", y = "Total Economic Damages (Property + Crop)")
dev.off
